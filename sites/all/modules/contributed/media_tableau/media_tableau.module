<?php

/**
 * @file media_tableau/media_tableau.module
 *
 * Media: Tableau provides a stream wrapper and formatters for visualizations provided
 * by Tableau, available at http://www.tableausoftware.com/.
 *
 */

// A registry of variable_get defaults.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_tableau') . '/includes/media_tableau.variables.inc';

// Hooks and callbacks for integrating with Styles module for display.
// @todo Can save a little overhead for people without Styles module by wrapping
//   this inside a module_exists('styles'). However, is that safe to do in
//   global context? If not, is there any down side to doing it in hook_init()?
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_tableau') . '/includes/media_tableau.styles.inc';

// Hooks and callbacks for integrating with File Entity module for display.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'media_tableau') . '/includes/media_tableau.formatters.inc';

/**
 * Implements hook_media_internet_providers().
 */
function media_tableau_media_internet_providers() {
  $path = drupal_get_path('module', 'media_tableau');
  return array(
    'MediaInternetTableauHandler' => array(
      'title' => 'tableau',
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function media_tableau_stream_wrappers() {
  return array(
    'tableau' => array(
      'name' => t('Tableau videos'),
      'class' => 'MediaTableauStreamWrapper',
      'description' => t('Visualizations provided by Tableau.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function media_tableau_theme($existing, $type, $theme, $path) {
  return array(
    'media_tableau_preview_style' => array(
      'variables' => array('style_name' => NULL),
      'file' => 'media_tableau.theme.inc',
      'path' => $path . '/includes/themes',
    ),
    'media_tableau_field_formatter_styles' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
      'file' => 'media_tableau.theme.inc',
      'path' => $path . '/includes/themes',
    ),
    // Note that all the variables after options are now deprecated.
    'media_tableau_visualization_name' => array(
      'variables' => array('uri' => NULL, 'options' => array(), 'width' => NULL, 'height' => NULL),
      'file' => 'media_tableau.theme.inc',
      'path' => $path . '/includes/themes',
      'template' => 'media-tableau-visualization-name',
    ),
    'media_tableau_visualization_path' => array(
      'variables' => array('uri' => NULL, 'options' => array(), 'width' => NULL, 'height' => NULL),
      'file' => 'media_tableau.theme.inc',
      'path' => $path . '/includes/themes',
      'template' => 'media-tableau-visualization-path',
    ),
    'media_tableau_embed' => array(
      'variables' => array('style_name' => NULL, 'uri' => NULL, 'alt' => NULL, 'title' => NULL),
      'file' => 'media_tableau.theme.inc',
      'path' => $path . '/includes/themes',
    ),
    'media_tableau_styles' => array(
      'variables' => array('element' => NULL, 'style' => NULL),
      'file' => 'media_tableau.theme.inc',
      'path' => $path . '/includes/themes',
    ),
  );
}

/**
 * Implements hook_media_parse().
 *
 * @todo This hook should be deprecated. Refactor Media module to not call it
 *   any more, since media_internet should be able to automatically route to the
 *   appropriate handler.
 */
function media_tableau_media_parse($embed_code) {
  $handler = new MediaInternetTableauHandler($embed_code);
  return $handler->parse($embed_code);
}

/**
 * Implements hook_media_format_form_prepare_alter().
 */
function media_tableau_media_format_form_prepare_alter(&$form, &$form_state, $media) {
  $settings = array('autosubmit' => ($media->type == "video"));
  drupal_add_js(array('media_format_form' => $settings), 'setting');
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_tableau_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

function media_tableau_file_default_types_alter(&$types) {
  $types['document']->mimetypes[] = 'application/tableau';
}


/**
 * Implements hook_file_mymetype_mapping_alter().
 */
function media_tableau_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes']['tableau'] = 'application/tableau';
}
