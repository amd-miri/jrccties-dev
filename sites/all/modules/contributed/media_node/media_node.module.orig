<?php

/**
 *  @file
 *  Embedded Video Field v3 provider file for embedding referenced Nodes.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

// A registry of variable_get defaults.
include_once('includes/media_node.variables.inc');

// Hooks and callbacks for integrating with File Entity module for display.
include_once('includes/media_node.formatters.inc');

/**
 * Implementation of hook_menu().
 */
function media_node_menu() {
  return array(
    'admin/config/media/media_node' => array(
      'title' => 'Media: Node',
      'description' => 'Configure what content types can be accessed as media.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_node_settings'),
      'access callback' => 'media_node_admin_access',
      'file' => 'includes/media_node.admin.inc',
    ),
  );
}

function media_node_admin_access() {
  return 'administer media' || 'administer site configuration';
}

/**
 * Implementation of hook_stream_wrappers().
 */
function media_node_stream_wrappers() {
  return array(
    'node' => array(
      'name' => t('Node'),
      'class' => 'MediaNodeStreamWrapper',
      'description' => t('Local content.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function media_node_theme($existing, $type, $theme, $path) {
  return array(
    'media_node' => array(
      'variables' => array('file' => NULL, 'display' => NULL, 'langcode' => NULL),
      'path' => $path . '/themes',
      'file' => 'media_node.theme.inc',
      'template' => 'media-node',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_node_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

function media_node_node_insert($node) {
  if (media_node_check_type($node->type)) {
    $uri = 'node://nid/' . $node->nid;
    $file = file_uri_to_object($uri);
    $file->filename = $node->title;
    file_save($file);
    file_usage_add($file, 'media_node', 'node', $node->nid);
  }
}

function media_node_node_update($node) {
  if (media_node_check_type($node->type)) {
    $uri = 'node://nid/' . $node->nid;
    $file = file_uri_to_object($uri);
    $file->filename = $node->title;
    file_save($file);
  }
}

function media_node_node_delete($node) {
  $uri = 'node://nid/' . $node->nid;
  $file = file_uri_to_object($uri);
  if (isset($file->fid) && $file->fid) {
    file_usage_delete($file, 'media_node');
    // We need to force the deletion, because this node will no longer exist.
    file_delete($file, TRUE);
  }
}

function media_node_check_type($type) {
  $types = media_node_variable_get('types');
  return isset($types[$type]) && $types[$type];
}
