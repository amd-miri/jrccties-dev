<?php

/**
 * @file
 * Functions for this module.
 */

/**
 * Load the necessary include files.
 */
module_load_include('inc', 'flag_notify', 'flag_notify_settings');

/**
 * Valid permissions for this module.
 *
 * Implements hook_permission().
 *
 * @return array
 *   An array of valid permissions for the test_module module
 */
function flag_notify_permission() {
  return array(
    'administer flag notify' => array(
      'title' => t('Administer Flag Notify'),
      'description' => t('Set roles that may access the Flag Notify settings.'),
    ),
  );
}

/**
 * Display help and module information.
 *
 * Implements hook_help().
 *
 * @param string $path
 *   Which path of the site we're displaying help.
 * @param array $arg
 *   Array that holds the current path as would be returned from arg() function.
 *
 * @return string
 *   Help text for the path.
 */
function flag_notify_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flag_notify':
      $output = file_get_contents(drupal_get_path('module', 'flag_notify') . '/README.txt');
      return nl2br($output);

    case 'admin/config/system/flag_notify':
      $output = '<p>' . t("Use the !flag_module_url to define flags for comment, content and/or group notifications and set here their names", array('!flag_module_url' => l(t('Flag module admin page'), 'admin/structure/flags'))) . '</p>';
      return $output;
  }
}

/**
 * Menu for this module.
 *
 * Implements hook_menu().
 *
 * @return array
 *   An array with this module's settings.
 */
function flag_notify_menu() {
  $items = array();

  $items['admin/config/system/flag_notify'] = array(
    'title' => 'Flag Notify',
    'description' => 'Configure Flag Notify module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_notify_admin'),
    'access arguments' => array('administer flag notify'),
    'weight' => 0,
  );

  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['admin/config/system/flag_notify/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  // A shortcut to the permissions settings for this module.
  $items['admin/config/system/flag_notify/permissions'] = array(
    'title' => 'Permissions',
    'description' => 'Configure access permissions',
    'page callback' => 'flag_notify_perms_callback',
    'access arguments' => array('administer flag notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Redirect to the module's permission settings.
 *
 * A callback from flag_notify_menu(), not a hook.
 */
function flag_notify_perms_callback() {
  drupal_goto('admin/people/permissions', array('fragment' => 'module-flag_notify'));
}

/**
 * Implements hook_field_access().
 */
function flag_notify_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'flag_notify_field_defaults' && $op == 'view') {
    if ($entity->uid == $account->uid) {
      // View only own values for this field.
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;
}


// ****************** logic of the module starts here *************************
/**
 * Implements hook_comment_publish().
 */
function flag_notify_comment_publish($comment) {
  $use_default_events = variable_get('flag_notify_use_default_events', '1');
  if (!$use_default_events) {
    return;
  }
  $user = user_load($comment->uid);
  $node = node_load($comment->nid);

  $groups = array();
  if (module_exists('og')) {
    $group_ids = og_get_entity_groups('node', $node);
  }
  if (isset($group_ids['node'])) {
    // Getting only node groups.
    foreach ($group_ids['node'] as $group_id) {
      $group = node_load($group_id);
      $groups[] = $group;
    }
  }
  // Fire notification.
  flag_notify_main('new_comment', $groups, $node, $comment, $user);

  // Flag user to follow its own comment if that's in its options.
  $user_default_options = field_get_items('user', $user, 'flag_notify_field_defaults');
  $flag_notify_flag_comment_mname = variable_get('flag_notify_flag_comment_mname', '0');
  if ($user_default_options) {
    foreach ($user_default_options as $option) {
      if ($option['value'] == 'comment' && $flag_notify_flag_comment_mname) {
        $flag = flag_get_flag($flag_notify_flag_comment_mname);
        $flag->flag('flag', $comment->cid, $user);
        break;
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function flag_notify_node_insert($node) {
  $use_default_events = variable_get('flag_notify_use_default_events', '1');
  if (!$use_default_events) {
    return;
  }
  if ($node->status == 1) {
    $user = user_load($node->uid);
    $groups = array();
    if (module_exists('og')) {
      $group_ids = og_get_entity_groups('node', $node);
    }
    if (isset($group_ids['node'])) {
      // Getting only node groups.
      foreach ($group_ids['node'] as $group_id) {
        $group = node_load($group_id);
        $groups[] = $group;
      }
    }
    // Fire notification.
    flag_notify_main('new_content', $groups, $node, NULL, $user);

    // Flag user to follow its own node if that's in its options.
    $user_default_options = field_get_items('user', $user, 'flag_notify_field_defaults');
    $flag_notify_flag_content_mname = variable_get('flag_notify_flag_content_mname', '0');
    if ($user_default_options) {
      foreach ($user_default_options as $option) {
        if ($option['value'] == 'content' && $flag_notify_flag_content_mname) {
          $flag = flag_get_flag($flag_notify_flag_content_mname);
          $flag->flag('flag', $node->nid, $user);
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function flag_notify_node_update($node) {
  $use_default_events = variable_get('flag_notify_use_default_events', '1');
  if (!$use_default_events) {
    return;
  }
  $old_node = $node->original;
  entity_get_controller('node')->resetCache(array($node->nid));
  if ($node->status == 1) {
    $groups = array();
    if (module_exists('og')) {
      $group_ids = og_get_entity_groups('node', $node);
    }
    if (isset($group_ids['node'])) {
      // Getting only node groups.
      foreach ($group_ids['node'] as $group_id) {
        $group = node_load($group_id);
        $groups[] = $group;
      }
    }
    if ($old_node->status == 0) {
      // I treat this as an insert.
      $user = user_load($node->uid);
      // Fire notifications.
      flag_notify_main('new_content', $groups, $node, NULL, $user);

      // Flag user to follow its own node if that's in its options.
      $user_default_options = field_get_items('user', $user, 'flag_notify_field_defaults');
      $flag_notify_flag_content_mname = variable_get('flag_notify_flag_content_mname', '0');
      if ($user_default_options) {
        foreach ($user_default_options as $option) {
          if ($option['value'] == 'content' && $flag_notify_flag_content_mname) {
            $flag = flag_get_flag($flag_notify_flag_content_mname);
            $flag->flag('flag', $node->nid, $user);
            break;
          }
        }
      }
    }
    else {
      // Definitivelly an update.
      $account = $GLOBALS['user'];
      // Fire notifications.
      flag_notify_main('edited_content', $groups, $node, NULL, $account);
    }
  }
}

/**
 * Implements hook_og_membership_insert().
 */
function flag_notify_og_membership_insert(OgMembership $og_membership) {
  $use_default_events = variable_get('flag_notify_use_default_events', '1');
  if (!$use_default_events) {
    return;
  }

  if ($og_membership->entity_type != 'user') {
    // We want deal only with new users here, no content attached to a group.
    return;
  }
  if ($og_membership->state != '1') {
    // This new user still need approval, doing nothing.
    return;
  }
  $groups = array();
  $account = user_load($og_membership->etid);
  $group = node_load($og_membership->gid);
  $groups[] = $group;
  // Fire notifications.
  flag_notify_main('new_user', $groups, NULL, NULL, $account);
  // Flag user to follow the group activity it just joined if that's in its
  // options.
  $user_default_options = field_get_items('user', $account, 'flag_notify_field_defaults');
  $flag_notify_flag_group_mname = variable_get('flag_notify_flag_group_mname', '0');
  if ($user_default_options) {
    foreach ($user_default_options as $option) {
      if ($option['value'] == 'group' && $flag_notify_flag_group_mname) {
        $flag = flag_get_flag($flag_notify_flag_group_mname);
        $flag->flag('flag', $group->nid, $account);
        break;
      }
    }
  }
}

/**
 * Implements hook_og_membership_update().
 */
function flag_notify_og_membership_update(OgMembership $og_membership) {
  $use_default_events = variable_get('flag_notify_use_default_events', '1');
  if ($og_membership->entity_type != 'user') {
    // We want deal only with new users here, no content attached to a group.
    return;
  }

  $old_membership = $og_membership->original;
  if ($old_membership->state != "1" && $og_membership->state == "1" && $use_default_events) {
    // It's an approval.
    $groups = array();
    $account = user_load($og_membership->etid);
    $group = node_load($og_membership->gid);
    $groups[] = $group;
    // Fire notifications.
    flag_notify_main('new_user', $groups, NULL, NULL, $account);
    // Glag user to follow the group activity it just joined if that's in its
    // options.
    $user_default_options = field_get_items('user', $account, 'flag_notify_field_defaults');
    $flag_notify_flag_group_mname = variable_get('flag_notify_flag_group_mname', '0');
    if ($user_default_options) {
      foreach ($user_default_options as $option) {
        if ($option['value'] == 'group' && $flag_notify_flag_group_mname) {
          $flag = flag_get_flag($flag_notify_flag_group_mname);
          $flag->flag('flag', $group->nid, $account);
          break;
        }
      }
    }
  }
  elseif ($old_membership->state == "1" && $og_membership->state != "1") {
    // It's banned/bloccked, let's remove also notifications.
    // TODO: remove notification only for private groups.
    $account = user_load($og_membership->etid);
    $group = node_load($og_membership->gid);
    $flag_notify_flag_group_mname = variable_get('flag_notify_flag_group_mname', '0');
    if ($flag_notify_flag_group_mname) {
      $flag = flag_get_flag($flag_notify_flag_group_mname);
      $flag->flag('unflag', $group->nid, $account);
    }
  }
}

/**
 * Implements hook_og_membership_delete().
 */
function flag_notify_og_membership_delete(OgMembership $og_membership) {
  if ($og_membership->entity_type != 'user') {
    // We want deal only with new users here, no content attached to a group.
    return;
  }
  // TODO: remove notification only for private groups.
  $account = user_load($og_membership->etid);
  $group = node_load($og_membership->gid);
  $flag_notify_flag_group_mname = variable_get('flag_notify_flag_group_mname', '0');
  if ($flag_notify_flag_group_mname) {
    $flag = flag_get_flag($flag_notify_flag_group_mname);
    $flag->flag('unflag', $group->nid, $account);
  }
}


/**
 * Pick up the targeted users of the notification.
 * 
 * This function selects the users to notify and calls flag_notify_fire_email()
 * with them.
 *
 * @param string $event
 *   Type of event issued, either 'new_comment', 'new_content',
 *   'edited_content' or 'new_user'.
 * @param array $groups
 *   Array of og groups to which the content belong to.
 * @param entity $node
 *   The content edited or with new comments.
 * @param entity $comment
 *   The comment sent (if any).
 * @param entity $user
 *   The comment or content author (new comment/content), acting user (edited
 *   content) or the new og user.
 */
function flag_notify_main($event, $groups, $node, $comment, $user) {

  // @see user_module_invoke()
  $break = False;
  $notifyActingUser = False;

  foreach (module_implements('flag_notify_event_alter') as $module) {
    $function = $module . '_flag_notify_event_alter';
    // will call all modules implementing hook_hook_name
    // and can pass each argument as reference determined
    // by the function declaration
    $function($break, $event, $groups, $node, $comment, $user, $notifyActingUser);
  }

  if($break) {
    return;
  }

  // Lists of uids that will be notified..
  $users_comment = array();
  $users_content = array();
  $users_group = array();

  $flag_notify_flag_comment_mname = variable_get('flag_notify_flag_comment_mname', '0');
  $flag_notify_flag_content_mname = variable_get('flag_notify_flag_content_mname', '0');
  $flag_notify_flag_group_mname = variable_get('flag_notify_flag_group_mname', '0');

  // Checking who has flagged the parent comments for reply notification..
  if ($flag_notify_flag_comment_mname && $event == 'new_comment') {
    $threads = explode('.', $comment->thread);
    $thread = "";
    $pnids = array();
    for ($i = 0; $i < (count($threads) - 1); $i++) {
      $thread .= $threads[$i];
      $local_thread = $thread . "/";
      $result = db_query(
        'SELECT c.cid FROM {comment} c WHERE c.nid = :nid AND c.thread = :thread AND c.status = :status',
        array(
          ':nid' => $comment->nid,
          ':thread' => $local_thread,
          ':status' => '1',
        )
      );
      foreach ($result as $record) {
        $pnids[] = $record->cid;
      }
      $thread .= ".";
    }
    foreach ($pnids as $pnid) {
      $users_comment_data = flag_get_entity_flags('comment', $pnid, $flag_notify_flag_comment_mname);
      foreach ($users_comment_data as $user_comment_data) {
        if (!array_key_exists($user_comment_data->uid, $users_comment)) {
          $users_comment[$user_comment_data->uid] = $user_comment_data->uid;
        }
      }
    }
  }

  // Checking who has flagged the node for comment/edit notification..
  if ($flag_notify_flag_content_mname && $event != 'new_user') {
    $users_content_data = flag_get_entity_flags('node', $node->nid, $flag_notify_flag_content_mname);
    foreach ($users_content_data as $user_content_data) {
      if ((!array_key_exists($user_content_data->uid, $users_comment)) &&
          (!array_key_exists($user_content_data->uid, $users_content))) {
        $users_content[$user_content_data->uid] = $user_content_data->uid;
      }
    }
  }

  // Checking who has flagged the og group for activities notifications..
  if ($flag_notify_flag_group_mname) {
    foreach ($groups as $group) {
      $users_group_data = flag_get_entity_flags('node', $group->nid, $flag_notify_flag_group_mname);
      foreach ($users_group_data as $user_group_data) {
        if ((!array_key_exists($user_group_data->uid, $users_comment)) &&
            (!array_key_exists($user_group_data->uid, $users_content)) &&
            (!array_key_exists($user_group_data->uid, $users_group))) {
          // Here we need also the group information for the email.
          $users_group[$user_group_data->uid] = $group;
        }
      }
    }
  }

  foreach ($users_comment as $user_comment) {
    if($notifyActingUser || ($user->uid != $user_comment)){
      flag_notify_fire_email($event, NULL, $node, $comment, $user, $user_comment, 'comment');
    }
  }
  foreach ($users_content as $user_content) {
    if($notifyActingUser || ($user->uid != $user_content)){
      flag_notify_fire_email($event, NULL, $node, $comment, $user, $user_content, 'content');
    }
  }
  foreach (array_keys($users_group) as $key) {
    if($notifyActingUser || ($user->uid != $key)){
      flag_notify_fire_email($event, $users_group[$key], $node, $comment, $user, $key, 'group');
    }
  }
}

/**
 * Implements the logic.
 *
 * Possible [notification-type] / [event-type] matches:
 * - comment - new_comment
 * - content - new_content
 * - content - edited_content
 * - group - new_comment
 * - group - new_content
 * - group - edited_content
 * - group - new_users
 *
 * @param string $event
 *   Type of event issued, either 'new_comment', 'new_content',
 *   'edited_content' or 'new_user'.
 * @param entity $group
 *   The og groups to which the content and the notified user belong to.
 * @param entity $node
 *   The content edited or with new comments.
 * @param entity $comment
 *   The comment sent (if any).
 * @param entity $user
 *   The comment or content author (new comment/content), acting user (edited
 *   content) or the new og user.
 * @param int $targetuser_uid
 *   The uid of the user to notify.
 * @param string $notification_type
 *   The reason this user is notified, either 'comment', 'content' or 'group'.
 */
function flag_notify_fire_email($event, $group, $node, $comment, $user, $targetuser_uid, $notification_type) {
  global $base_url;
  $suspend_notifications = variable_get('flag_notify_suspend_notifications', '0');
  if ($suspend_notifications) {
    // Notifications are suspended.
    return;
  }

  // --START DEPRECATED CODE--
  // @see user_module_invoke()
  $break = False;
  foreach (module_implements('flag_notify_notification_alter') as $module) {
    $function = $module . '_flag_notify_notification_alter';
    // will call all modules implementing hook_hook_name
    // and can pass each argument as reference determined
    // by the function declaration
    $function($break, $event, $group, $node, $comment, $user, $targetuser_uid, $notification_type);
  }
  if($break) {
    return;
  }
  // --END DEPRECATED CODE --

  $site_name = variable_get('site_name', 'Drupal');
  $site_email = variable_get('site_mail', ini_get('sendmail_from'));
  $salutation = variable_get('flag_notify_email_salutation', t('Dear'));
  $flag_notify_url_manage_notifications = variable_get('flag_notify_url_manage_notifications', '');
  $flag_notify_email_footer = variable_get('flag_notify_email_footer', '');
  $tuser = user_load($targetuser_uid);
  $tuser_name = $tuser->name;
  $language = user_preferred_language($tuser);
  $acting_user = $GLOBALS['user'];
  //if ($acting_user->uid == $tuser->uid) {
  //  // No need to send notification to the acting user!
  //  return;
  //}

  $subject = "[" . $site_name . "] ";
  $msg = "";

  if ($notification_type == 'comment') {

    $flag_notify_flag_comment_mname = variable_get('flag_notify_flag_comment_mname', '0');
    $flag = flag_get_flag($flag_notify_flag_comment_mname);
    $unflag_text = $flag->unflag_short;
    $cbody_field = field_get_items('comment', $comment, 'comment_body');
    $cbody = "";
    if (isset($cbody_field)) {
      $cbody = $cbody_field[0]['value'];
    }
    $subject .= t('Comment follow-up:') . ' ' . $comment->subject;
    $msg .= t("!salutation !tuser_name, a comment you subscribed received a reply:\n\n",
      array('!salutation' => $salutation, '!tuser_name' => $tuser_name));
    $msg .= t("Title") . ": " . $comment->subject . "\n";
    $msg .= t("Author") . ": " . $user->name . "\n";
    $msg .= t("In content") . ": " . $node->title . "\n";
    $msg .= t("Comment") . ":\n" . drupal_html_to_text($cbody) . "\n";
    $msg .= "-----------------\n";
    $msg .= "*** " . t('ACTIONS') . " ***\n";
    $msg .= t("Read the comment in context and reply") . ": " . $base_url . "/comment/" . $comment->cid . "#comment-" . $comment->cid . "\n";
    $msg .= t("Browse !user_name profile", array('!user_name' => $user->name)) . ": " . $base_url . "/user/" . $user->uid . "\n";
    $msg .= "-----------------\n";
    $msg .= "*** " . t('MANAGE NOTIFICATIONS') . " ***\n";
    $msg .= t("Replies to this comment") . ": " . t('click the "!unflag_text" link on the comment', array('!unflag_text' => $unflag_text)) . "\n";

  }
  elseif ($notification_type == 'content') {
    $flag_notify_flag_content_mname = variable_get('flag_notify_flag_content_mname', '0');
    $flag = flag_get_flag($flag_notify_flag_content_mname);
    $unflag_text = $flag->unflag_short;

    if ($event == 'new_comment') {
      $cbody_field = field_get_items('comment', $comment, 'comment_body');
      $cbody = "";
      if (isset($cbody_field)) {
        $cbody = $cbody_field[0]['value'];
      }

      $subject .= t('New comment:') . ' ' . $comment->subject;
      $msg .= t("!salutation !tuser_name, a comment has been sent in a content you subscribed:\n\n",
        array('!salutation' => $salutation, '!tuser_name' => $tuser_name));
      $msg .= t("Comment title") . ": " . $comment->subject . "\n";
      $msg .= t("Comment author") . ": " . $user->name . "\n";
      $msg .= t("In content") . ": " . $node->title . " (" . $node->type . ")\n";
      $msg .= t("Comment") . ":\n" . drupal_html_to_text($cbody) . "\n";
      $msg .= "-----------------\n";
      $msg .= "*** " . t('ACTIONS') . " ***\n";
      $msg .= t("Read the comment in context and reply") . ": " . $base_url . "/comment/" . $comment->cid . "#comment-" . $comment->cid . "\n";

    }
    elseif ($event == 'edited_content') {
      $subject .= t('Content modified:') . ' ' . $node->title;
      $msg .= t("!salutation !tuser_name, a content you are subscribed has been edited:\n\n", array('!salutation' => $salutation, '!tuser_name' => $tuser_name));
      $msg .= t("Title") . ": " . $node->title . "\n";
      $msg .= t("Type") . ": " . $node->type . "\n";
      $msg .= t("Author of the editing(s)") . ": " . $user->name . "\n";

      $msg .= "-----------------\n";
      $msg .= "*** " . t('ACTIONS') . " ***\n";
      $msg .= t("View the content") . ": " . $base_url . "/node/" . $node->nid . "\n";

    }
    else {
      watchdog('flag_notify', 'Got an unknow event under "content" notification_type. Don\'t know how to handle it');
      return;
    }
    $msg .= t("Browse !user_name profile", array('!user_name' => $user->name)) . ": " . $base_url . "/user/" . $user->uid . "\n";
    $msg .= "-----------------\n";
    $msg .= "*** " . t('MANAGE NOTIFICATIONS') . " ***\n";
    $msg .= t("Comments and modifications of this content") . ": " .
      t('click the "!unflag_text" link on the content', array('!unflag_text' => $unflag_text)) . "\n";

  }
  elseif ($notification_type == 'group') {

    $flag_notify_flag_group_mname = variable_get('flag_notify_flag_group_mname', '0');
    $flag = flag_get_flag($flag_notify_flag_group_mname);
    $unflag_text = $flag->unflag_short;
    $subject .= "[" . $group->title . "] ";
    if ($event == 'new_comment') {
      $cbody_field = field_get_items('comment', $comment, 'comment_body');
      $cbody = "";
      if (isset($cbody_field)) {
        $cbody = $cbody_field[0]['value'];
      }
      $subject .= t('New comment');
      $msg .= t("!salutation !tuser_name, a comment has been posted in a group you subscribed:\n\n", array('!salutation' => $salutation, '!tuser_name' => $tuser_name));
      $msg .= t("Comment title") . ": " . $comment->subject . "\n";
      $msg .= t("Comment author") . ": " . $user->name . "\n";
      $msg .= t("In content") . ": " . $node->title . " (" . $node->type . ")\n";
      $msg .= t("In group") . ": " . $group->title . "\n";
      $msg .= t("Comment") . ":\n" . drupal_html_to_text($cbody) . "\n";
      $msg .= "-----------------\n";
      $msg .= "*** " . t('ACTIONS') . " ***\n";
      $msg .= t("Read the comment in context and reply") . ": " . $base_url . "/comment/" . $comment->cid . "#comment-" . $comment->cid . "\n";
    }
    elseif ($event == 'edited_content') {

      $subject .= t('Content modified.');
      $msg .= t("!salutation !tuser_name, a content in a group you subscribed has been edited:\n\n", array('!salutation' => $salutation, '!tuser_name' => $tuser_name));
      $msg .= t("Title") . ": " . $node->title . "\n";
      $msg .= t("Type") . ": " . $node->type . "\n";
      $msg .= t("In group") . ": " . $group->title . "\n";
      $msg .= t("Author of the editing(s)") . ": " . $user->name . "\n";
      $msg .= "-----------------\n";
      $msg .= "*** " . t('ACTIONS') . " ***\n";
      $msg .= t("View the edited content") . ": " . $base_url . "/node/" . $node->nid . "\n";

    }
    elseif ($event == 'new_content') {
      $subject .= t('New content.');
      $msg .= t("!salutation !tuser_name, a content has been posted in a group you subscribed:\n\n", array('!salutation' => $salutation, '!tuser_name' => $tuser_name));
      $msg .= t("Title") . ": " . $node->title . "\n";
      $msg .= t("Type") . ": " . $node->type . "\n";
      $msg .= t("In group") . ": " . $group->title . "\n";
      $msg .= t("Author") . ": " . $user->name . "\n";
      $msg .= "-----------------\n";
      $msg .= "*** " . t('ACTIONS') . " ***\n";
      $msg .= t("View the new content") . ": " . $base_url . "/node/" . $node->nid . "\n";

    }
    elseif ($event == 'new_user') {
      $subject .= t('New user.');
      $msg .= t("!salutation !tuser_name, a new user has joined a group you subscribed:\n\n", array('!salutation' => $salutation, '!tuser_name' => $tuser_name));

      $msg .= t("New user") . ": " . $user->name . "\n";
      $msg .= t("In group") . ": " . $group->title . "\n";

      $msg .= "-----------------\n";
      $msg .= "*** " . t('ACTIONS') . " ***\n";
    }
    else {
      watchdog('flag_notify', 'Got an unknow event under "group" notification_type. Don\'t know how to handle it');
      return;
    }

    $msg .= t("Browse !user_name profile", array('!user_name' => $user->name)) . ": " . $base_url . "/user/" . $user->uid . "\n";
    $msg .= t("Visit the group homepage") . ": " . $base_url . "/node/" . $group->nid . "\n";
    $msg .= "-----------------\n";
    $msg .= "*** " . t('MANAGE NOTIFICATIONS') . " ***\n";
    $msg .= t("Activity of this group") . ": " . t('click the "!unflag_text" link on the group home page', array('!unflag_text' => $unflag_text)) . "\n";

  }
  else {
    watchdog('flag_notify', 'Got an unknow notification_type. Don\'t know how to handle it');
    return;
  }

  if ($flag_notify_url_manage_notifications) {
    $msg .= t("Manage all your notifications") . ": " . $base_url . "/" . $flag_notify_url_manage_notifications . "\n";
  }
  $msg .= t("Manage your defaults") . ": " . t('Edit your user profile and set the "Default notifications settings" options according to your needs.') . "\n\n";
  if ($flag_notify_email_footer) {
    $msg .= drupal_html_to_text($flag_notify_email_footer);
  }

  // @see user_module_invoke()
  $break = False;
  foreach (module_implements('flag_notify_message_alter') as $module) {
    $function = $module . '_flag_notify_message_alter';
    // will call all modules implementing hook_hook_name
    // and can pass each argument as reference determined
    // by the function declaration
    $function($break, $event, $group, $node, $comment, $user, $tuser, $notification_type, $subject, $msg);
  }
  if($break) {
    return;
  }
  
  
  
  $params = array();
  $params['subject'] = $subject;
  $params['body'] = $msg;

  // http://drupalcode.org/project/examples.git/blob_plain/refs/heads/7.x-1.x:/
  // email_example/email_example.module
  // $result = drupal_mail($module, $key, $to, $language, $params, $from,
  // $send);
  $result = drupal_mail('flag_notify', 'notification_email', $tuser->mail, $language, $params, $site_email, TRUE);

  if ($result['result'] != TRUE) {
    watchdog('flag_notify', 'There was a problem sending the notification and it was not sent.', NULL, WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_mail().
 */
function flag_notify_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
