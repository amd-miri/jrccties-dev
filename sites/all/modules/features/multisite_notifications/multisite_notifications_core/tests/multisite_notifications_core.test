<?php

/**
 * @file
 * Test case for testing the block example module.
 */
class anonymousNotification extends DrupalWebTestCase {

  protected $administrator;
  protected $visitor;

  public static function getInfo() {
    return array(
        'name' => 'Anonymous Notification',
        'description' => 'Test the configuration options and block created by Notifications module.',
        'group' => 'Multisite Core Features',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  function setUp() {
    parent::setUp('multisite_notifications_core', 'mail_logger');
    $this->administrator = $this->drupalCreateUserWithRole("administrator");
    $this->visitor = $this->drupalCreateUserWithRole("anonymous");
  }

  /**
   * Login user, create an example node, and test block functionality through
   * the admin and user interfaces.
   *
   * Test block activation
   *
   */
  function testSubscriptionBlockBasic() {
    $mail = 'DIGIT-FPFIS-SUPPORT@ec.europa.eu';

    // Log as admin.
    $this->drupalLogin($this->administrator);

    //Add the subscription block in the sidebar.
    $this->drupalGet('admin/structure/block');

    // Enable the subscription block in sidebar_first.
    $block_options = array();
    $block_options['blocks[multisite_notifications_core_notification_block][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $block_options, t('Save blocks'));
    $this->assertRaw(t('The block settings have been updated.'), 'The block settings have been updated.');

    $settings = array(
        'type' => 'page',
        'my_special_field' => 'glark',
    );
    $node = $this->drupalCreateNode($settings);
    $this->assertEqual($node->type, 'page');

    // Browse as visitor
    $this->drupalLogout();
    $this->drupalGet('node/' . $node->nid);
    // Verify you see anonymous subscription block.
    $this->assertRaw(t('multisite-notifications-core-form'), 'Subscription block is enabled. Form is available.');

    //Case 1 enter wrong email
    $wrong_data = array('mail' => 'InvalidMailwrongserver.com');
    $this->drupalPost('node', $wrong_data, t('Subscribe'));
    $this->assertTrue(!count($this->drupalGetMails()), 'OK: No email was sent when entering wrong email.');
    $this->assertRaw(t('The e-mail address you supplied is not valid'), 'Validation against wrong formed mail OK');

    //Case 2 enter empty email
    $wrong_data = array('mail' => '');
    $this->drupalPost(NULL, $wrong_data, t('Unsubscribe'));
    $this->assertTrue(!count($this->drupalGetMails()), 'OK: No email was sent. Submitted empty field');

    //Case 3 enter right email
    $correct_data = array('mail' => $mail);
    $this->drupalPost(NULL, $correct_data, t('Subscribe'));
    $this->assertRaw(t('You will receive a confirmation e-mail shortly containing further instructions on how to complete your subscription.'), 'Confirmation notice that You will receive a confirmation e-mail shortly...OK');

    //Case 4 enter existing email
    $wrong_data = array('mail' => $mail);
    $this->drupalPost(NULL, $wrong_data, t('Subscribe'));
    $this->assertTrue(count($this->drupalGetMails()) < 2, 'No email was sent. You are already a subscriber!');
    $this->assertRaw(t('You are already a subscriber!'), 'Message "You are already a subscriber!" displayed');

    //ADMINISTRATOR - DEBUG
    $this->drupalLogin($this->administrator);
    $this->cronRun();
    $this->assertTrue(count($this->drupalGetMails()), 'Confirmation email was sent.');
    $this->drupalLogout();

    //Get user id
    $this->drupalLogin($this->administrator);
    $user = db_select('users', 'u')
    ->fields('u')
    ->condition('status', 0 , '=')
    ->condition('mail', $mail, '=')
    ->execute()
    ->fetchAssoc();

    $edit = array();
    $this->drupalPost('subscribe/' . $user['uid'], $edit, t('Confirm'));
    $this->assertRaw(t('Congratulations, you have confirmed your subscription.'), 'Confirmation message is visible');

    //Check that new user is now active
    $this->drupalLogin($this->administrator);
    $confirmed = db_select('users', 'u')
            ->fields('u')
            ->condition('status', 1 , '=')
            ->condition('mail', $mail, '=')
            ->execute()
            ->fetchAssoc();
     // Array is not empty
     $this->assertTrue(isset($confirmed), 'User has confirmed his account.');
     //Create article.
     $node1 = $this->drupalCreateNode(
            array(
                'type' => 'article',
                'title' => 'article title',
                'body' => array(LANGUAGE_NONE => array(array($this->randomName(10)))),
                'status' => 1,
                'workbench_moderation_state_new' => 'published',
                'promote' => 1,
                'subscriptions_notify' => 'checked',
                'field_article_publication_date[und][0][value][date]' => '08/09/2013',
                'field_article_publication_date[und][0][value][time]' => '15:30',
                ));

    $this->drupalGet('node/' . $node1->nid);
    $this->assertResponse(200, 'Subscription content is accesible');

    $this->verbose('Node created: ' . '</pre>' . print_r($node1, TRUE) . '</pre>');

    $this->cronRun();

    $this->assertTrue(count($this->drupalGetMails()), 'SUBSCRIPTION MAIL SUCCESFULLY SENT.');
    debug($this->drupalGetMails());
    $this->drupalGet('admin/reports/mail-logger');
  }

  /**
   * Creates a user with the give role.
   * */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

}

class multisiteNotification extends DrupalWebTestCase {

  protected $administrator;
  protected $anonymous;

  public static function getInfo() {
    return array(
        'name' => 'Notification',
        'description' => 'Notification Feature. 1.0',
        'group' => 'Multisite Core Features',
    );
  }

  function setUp() {
    parent::setUp(array(
        'multisite_notifications_core',
        'mail_logger',
    ));

   /* $this->visitor = $this->drupalCreateUser(array(
        'access content',
        'subscribe to all content types',
        'subscribe to content',
        'subscribe to content types',
        'subscribe to taxonomy terms',
        'suspend own subscriptions',
    ));*/

    $this->administrator = $this->drupalCreateUserWithRole("administrator");
    $this->visitor = $this->drupalCreateUserWithRole("anonymous");
    $this->drupalLogin($this->administrator);
  }

  function testNotifications() {

    //access notifications page
    $node1 = $this->drupalCreateNode(array('type' => 'page', 'title' => 'page for node 1'));
    $node2 = $this->drupalCreateNode(array('type' => 'article', 'title' => 'article for node 2'));

    $edit['url'] = 'admin/config/system/subscriptions';
    $this->drupalGet($edit['url']);
    $this->assertResponse(array(200), format_string('Settings Page: !url is accessible', array('!url' => $edit['url'])));
    $this->assertRaw('subscriptions-settings-form', 'Settings Form is present');
    $settings = array(
        'subscriptions_blocked_nodes' => '1',
    );
    $this->drupalPost(NULL, $settings, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), 'Forms setttings saved: Node 1 should be blocked.');


    $this->drupalGet('node/' . $node1->nid);
    $this->assertNoRaw('subscriptions[1]', 'Option to subscribe to the page is not available');
    $this->assertNoRaw('subscriptions[2]', 'Option to subscribe to the page content type is not available');

    $this->drupalGet('node/' . $node2->nid);
    $this->assertRaw('subscriptions[1]', 'Option to subscribe to the page is present');
    $this->assertRaw('subscriptions[2]', 'Option to subscribe to the page content type is present');

    $settings = array(
        'subscriptions[2]' => 'checked',
    );
    $this->drupalPost(NULL, $settings, t('Save'));
    $this->drupalLogout();

    $this->drupalGet('node/' . $node2->nid);
    $this->assertNoRaw('subscriptions[1]', 'Option to subscribe to the page is not available to anonymous users.');
    $this->assertNoRaw('subscriptions[2]', 'Option to subscribe to the page content type is not available to anonymous users.');

    $this->drupalLogin($this->visitor);
    $this->drupalGet('node/' . $node2->nid);

    $this->assertNoFieldChecked('edit-subscriptions-1', 'The user has not subscribed to this content.');
    $this->assertNoFieldChecked('edit-subscriptions-2', 'The user has not subscribed to this content type.');

    //Subscribe
    $settings = array();
    $settings['subscriptions[1]'] = 'checked';
    $settings['subscriptions[2]'] = 'checked';
    $this->drupalPost(NULL, $settings, t('Save'));

    //Create article in order to get notification
    $node3 = $this->drupalCreateNode(
            array(
                'type' => 'article',
                'title' => 'article for node 2',
                'body' => array(LANGUAGE_NONE => array(array($this->randomName(10)))),
                'status' => 1,
                'workbench_moderation_state_new' => 'published',
                'promote' => 1,
                'subscriptions_notify' => 'checked',
                'field_article_publication_date[und][0][value][date]' => '08/09/2013',
                'field_article_publication_date[und][0][value][time]' => '15:30',
                ));

    $this->verbose('Node created: ' . '</pre>' . print_r($node3, TRUE) . '</pre>');

    $this->drupalGet('node/' . $node3->nid);
    $this->assertResponse(200, 'Subscription content is accesible');
    $this->drupalLogout();

    $this->drupalLogin($this->administrator);
    $this->drupalGet('admin/content');
    $this->assertRaw(t('Send subscriptions notifications '), 'The checkbox exists on the content page');

    $this->cronRun();
    $this->assertTrue(count($this->drupalGetMails()), 'SUBSCRIPTION MAIL SUCCESFULLY SENT.');
    debug($this->drupalGetMails());
    $this->drupalGet('admin/reports/mail-logger');

  }

    /**
   * Creates a user with the give role.
   * */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }


}

/**
 * Defines a base class for testing the "Splash screen" module.
 */
class Multisite_multisite_notifications_QAWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
        'name' => 'multisite_notifications QA tests',
        'description' => 'Test the multisite_notifications features to ensure it follows QA requirements.',
        'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}