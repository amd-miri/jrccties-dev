<?php

/**
 * @file
 * Tests for PROJECTFEATURE_STARTERKIT.module.
 * ECWeb MULTISITE QA
 */

/**
 * Defines a base class for testing the "multisite_translations" module.
 */
class MultisiteWikiCoreQAWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'wiki_core tests',
      'description' => 'Test the wiki_core features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__ , ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module );

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']),'There is no reference to the menu dependency.');

    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?

    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

 function testInstallFile() {
    $module = basename(__FILE__ , ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module.'_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module.'_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module.'_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module.'_disable'), 'The module contains a hook_disable');
  }


}

/**
 * Defines a base class for testing the Wiki feature.
 */
class MultisiteWikiStandardFeatureTest extends DrupalWebTestCase {
  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
        'name' => 'wiki_core feature test',
        'description' => 'Test the wiki_core feature to ensure it works as intended.',
        'group' => 'Multisite Core Features',
    );
  }

  /**
   * Configure the environment, enable the required modules.
   */
  function setUp() {
    parent::setUp(array('wiki_core'));
    $this->user_contributor = $this->drupalCreateUserWithRole("user_contributor");
  }

  /**
   * Creates a user with the given role.
   **/
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

  /**
   * Check content type and fields.
   */
  function testWikiInstallation() {
    //Checkout there is a content type called wiki.
    $node_type = node_type_get_type('wiki');
    $this->assertTrue($node_type, 'There is a Wiki content type.', 'API');

    //Checkout wiki has a body field.
    $body = field_info_instance('node', 'body', 'wiki');
    $this->assertTrue($body, 'Wiki content type has a body field.', 'API');
  }

  /**
   * Check the access to the content creation depending on roles.
   */
  function testWikiAccess() {

    // Verify that anonymous users can't create wiki nodes.
    $this->drupalGet('node/add/wiki');
    $this->assertResponse(403, 'Anonymous Access -> Expected Fail');

    $this->drupalLogin($this->user_contributor);
    // Verify that authenticated users with permissions can create wiki nodes.
    $this->drupalGet('node/add/wiki');
    $this->assertResponse(200, 'Authenticated Access -> Expected OK');
  }

  /**
   * Create a "test" node and check it.
   */
  function testWikiCreate() {
    $this->drupalLogin($this->user_contributor);
    $title =  $this->randomName(8);

    $settings = array(
        'body' => array(LANGUAGE_NONE => array(array($this->randomName(128)))),
        'title' => $title,
        'type' => 'wiki',
        'status' => 1,
        'revisions' => NULL,
        'language' => LANGUAGE_NONE,
    );
    $node = $this->drupalCreateNode($settings);

    $this->drupalGet('node/'.$node->nid);
    $this->assertResponse(array(200), format_string('Settings Page: !url is accessible', array('!url' => 'node/'.$node->nid)));

  }
}