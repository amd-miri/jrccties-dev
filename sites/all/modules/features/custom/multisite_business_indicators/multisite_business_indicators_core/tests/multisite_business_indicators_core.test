<?php 
/**
 * @file
 * multisite_business_indicators_core.test
 */

/**
 * Test Business Indicators features to ensure it follows QA requirements.
 */
class BusinessIndicatorsCoreQAWebTestCase extends DrupalWebTestCase {
  protected $profile = 'multisite_drupal_communities';
  
  var $public_files_directory = NULL;
  
  public static function getInfo() {
    return array(
      'name' => 'Business Indicators Core QA tests',
      'description' => 'Test Business Indicators Core features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }
  
  function testMenuCallback() {
    
    $this->privileged_user = $this->drupalCreateUserWithRole('administrator');
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('admin/reports/business-indicators');
    $this->assertText('Business Indicators', 'Overview page title displayed correctly.');
  }
  
  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    
    $module = basename(__FILE__ , ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module );

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

      // Remove taxonomy dependencies
      // dependencies[] = "taxonomy"
      $this->assertFalse(in_array('taxonomy', $info['dependencies']), 'There is no reference to the taxonomy dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?

    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }


  protected function drupalCreateUserWithRole($role_name) {

    $role = user_role_load_by_name($role_name);
    
    // Create a user assigned to that role.
    $edit = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = user_password();
    $edit['status'] = 1;
    $edit['roles'] = array(
      2 => 2,
      $role->rid => $role_name,
    );

    $account = user_save(drupal_anonymous_user(), $edit);

    $this->assertTrue(!empty($account->uid), t('User with role %role_name created with name %name and pass %pass', array('%role_name' => $role_name, '%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }
}
