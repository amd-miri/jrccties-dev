<?php

/**
 * @file
 * Install updates and uninstall for multisite_settings_core
 */

function multisite_settings_core_enable() {
  //Add Archived and Validated Workflow States
  $result = db_select('workbench_moderation_states', 'wms')
    ->fields('wms')
    ->condition('name', 'archived', '=')
    ->execute()
    ->fetchObject();

  if (!$result) {
    $arch_state = db_insert('workbench_moderation_states')
      ->fields(array(
        'name' => 'archived',
        'label' => 'Archived',
        'description' => 'Content is not published anymore',
        'weight' => 100,
      ))
      ->execute();
  }

  $result = db_select('workbench_moderation_states', 'wms')
    ->fields('wms')
    ->condition('name', 'validated', '=')
    ->execute()
    ->fetchObject();

  if (!$result) {
    $vali_state = db_insert('workbench_moderation_states')
      ->fields(array(
        'name' => 'validated',
        'label' => 'Validated',
        'description' => 'Approved by administrator',
        'weight' => 10,
      ))
      ->execute();
  }

  //Add Archived and Validated corresponding transitions

  $transitions = array(
    array(
      'from_name' => 'published',
      'to_name' => 'archived',
    ),
    array(
      'from_name' => 'needs_review',
      'to_name' => 'validated',
    ),
    array(
      'from_name' => 'validated',
      'to_name' => 'published',
    ),
  );

  // Save default transitions to the database.
  $query = db_insert('workbench_moderation_transitions')
    ->fields(array('from_name', 'to_name'));

  foreach ($transitions as $transition) {

    $result = db_select('workbench_moderation_transitions', 'wmt')
      ->fields('wmt')
      ->condition('from_name', $transition['from_name'], '=')
      ->condition('to_name', $transition['to_name'], '=')
      ->execute()
      ->fetchObject();

    if (!$result)
      $query->values($transition);
  }

  $query->execute();

}

function multisite_settings_core_disable() {
}

function multisite_settings_core_install() {
}

function multisite_settings_core_uninstall() {
}


function multisite_settings_core_taxonomy_vocabulary_insert($vocabulary) {
  if ($vocabulary->machine_name == 'tags') {
    // add the vocabulary tags to the taxonomy browser settings
    $vids = variable_get('taxonomy_browser_vocabulary', array(2 => 2));
    $vids[$vocabulary->vid] = $vocabulary->vid;
    variable_set('taxonomy_browser_vocabulary', $vids);
    
    // add the block to the workbench context
    $context = module_invoke('context', 'load', 'workbench_moderate_all');
    $block_to_add = array(
      'module' => 'taxonomy_browser',
      'delta' => 'taxonomy_browser_vocabulary_'.$vocabulary->vid,
      'region' => 'sidebar_left',
      'weight' => '-10',
    );
    $context->reactions['block']['blocks']['taxonomy_browser-taxonomy_browser_vocabulary_'.$vocabulary->vid] = $block_to_add;
    module_invoke('context', 'save', $context);
  }
}


/**
 * Add and configure the context workbench
 */
function multisite_settings_core_update_7121() {
  // add the vocabulary tags to the taxonomy browser settings
  $tags_vocab = taxonomy_vocabulary_machine_name_load('tags');
  $vids = variable_get('taxonomy_browser_vocabulary');
  $vids[$tags_vocab->vid] = $tags_vocab->vid;
  variable_set('taxonomy_browser_vocabulary', $vids);  
  
  $context = new stdClass();
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->api_version = 3;
  $context->name = 'workbench_moderate_all';
  $context->description = '';
  $context->tag = 'workbench';
  $context->conditions = array(
    'path' => array(
      'values' => array(
        'admin/workbench/moderate-all*' => 'admin/workbench/moderate-all*',
      ),
    ),
  );
  $context->reactions = array(
    'block' => array(
      'blocks' => array(
        'taxonomy_browser-taxonomy_browser_vocabulary_'.$tags_vocab->vid => array(
          'module' => 'taxonomy_browser',
          'delta' => 'taxonomy_browser_vocabulary_'.$tags_vocab->vid,
          'region' => 'sidebar_left',
          'weight' => '-10',
        ),
      ),
    ),
  );
  $context->condition_mode = 0;

  context_save($context); 
  
}

/**
 * Disable cookie language.
 */
function multisite_settings_core_update_7122() {
  $lang = variable_get('language_negotiation_language');
  if (isset($lang['language_cookie'])) {
    unset($lang['language_cookie']);
    variable_set('language_negotiation_language', $lang);
  }
}
