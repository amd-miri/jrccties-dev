<?php

/**
 * @file
 * Tests for PROJECTFEATURE_e_library_standard_core.module.
 * ECWeb MULTISITE QA
 */

/**
 * Defines a base class for testing the "multisite_translations" module.
 */
class MultisiteELibraryStandardQAWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'E library core QA tests',
      'description' => 'Test the e_library_standard features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__ , ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module );

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');
    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?

    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__ , ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module.'_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module.'_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module.'_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module.'_disable'), 'The module contains a hook_disable');
  }

}

class Multisite_e_library_standardFunctionalWebTestCase extends DrupalWebTestCase {
  protected $privileged_user;
  protected $contributor_user;

  public static function getInfo() {
    return array(
      'name' => 'E library standard functional tests',
      'description' => 'Test the e_library_standard features',
      'group' => 'Multisite Standard',
    );
  }

  public function setUp() {
    parent::setUp(array('e_library_core', 'e_library_standard'));
    $this->privileged_user = $this->drupalCreateUserWithRole("administrator");
    $this->contributor_user = $this->drupalCreateUserWithRole("contributor");
    $this->drupalLogin($this->privileged_user);
  }

  function testELibraryStandard() {
    // Check the e_library page.
    $this->drupalGet('e_library');
    $this->assertResponse(200, 'The e_library is accessible');
    $this->assertRaw('Browse library of document', 'The e_library page is created');

    // Content type creation
    $field_name = 'field_document';
    $edit = array(
      'title' => 'my first document',
    );
    $edit['files[' . $field_name . '_' . LANGUAGE_NONE . '_0]'] = drupal_realpath('sites/all/modules/features/custom/e_library/e_library_standard/tests/test_file.pdf');
    $this->drupalPost('node/add/document', $edit, t('Save'));

    $this->assertRaw('my first document', 'Document created');
    $this->assertLink('test_file.pdf', 0, 'Link to uploaded document accessible');
    $this->clickLink('test_file.pdf');
    $this->assertResponse(200, 'The document uploaded is accessible');

    // Get the node object
    $node = $this->drupalGetNodeByTitle('my first document');
    // Change workflow state to published
    $moderate = array('state' => workbench_moderation_state_published());
    $this->drupalPost("node/{$node->nid}/moderation", $moderate, t('Apply'));

    $this->drupalGet('e_library');
    $this->assertLink('my first document', 0, 'The document created is visible in the e_library');
  }

  /**
  * Creates a user with the give role.
  * */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }
}

