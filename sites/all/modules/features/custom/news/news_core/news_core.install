<?php
/**
 * @file
 * Install the feature news
 */

/**
 * hook_install
 */
function news_core_install() {
  //Nothing yet
}

/**
 * hook_uninstall
 */
function news_core_uninstall() {
  //Nothing yet
}

/*
 * hook_enable
 * Perform necessary actions AFTER module is enabled.
 */

function news_core_enable() {

  // solR configuration add bundle
  multisite_drupal_toolbox_config_solr_bundle('news', 'add');

  // add type to linkchecker scan
  multisite_drupal_toolbox_content_type_linkchecker('news', 'add');

  // add type to the simplenews related content
  //multisite_drupal_toolbox_simplenews_related_content_type('news', 'add');
  //Activation message
  drupal_set_message(t('News feature is now active on your site.'));
}

/*
 * hook_disable
 * Edit communities context to remove block
 * Remove permissions
 */

function news_core_disable() {
  // solR configuration add bundle
  multisite_drupal_toolbox_config_solr_bundle('news', 'delete');

  // remove type to linkchecker scan
  multisite_drupal_toolbox_content_type_linkchecker('news', 'remove');

  // remove type to the simplenews related content
  //multisite_drupal_toolbox_simplenews_related_content_type('news', 'delete');


  /*   * * Remove permissions ** */
  multisite_drupal_toolbox_disable_content_type('news');

  // Administrator
  $adm_rid = multisite_drupal_toolbox_get_rid('administrator');
  user_role_revoke_permissions($adm_rid, array(
      'edit own news content',
      'edit any news content',
      'delete own news content',
      'delete any news content',
      'create news content',
  ));

  // Contributor
  $ctb_rid = multisite_drupal_toolbox_get_rid('contributor');
  user_role_revoke_permissions($ctb_rid, array(
      'edit own news content',
      'edit any news content',
      'delete own news content',
      'delete any news content',
      'create news content',
  ));

  drupal_set_message(t('News feature is now disabled on your site.'));
}

/**
 * Implementation of hook_update_n ()
 * 
 * Content types using date fields should be using timestamp instead datetime.
 * No need to update schema in hook_install().
 * On a clean installation the date fields are already set up.
 * DATE FIELD MIGRATION SCRIPT: datetime to datestamp.              
 */
function news_core_update_7101() {
  // --- CONFIG ---
  // $content type : content type that contains fiels to replace
  // $module_name : module that contains fields
  $content_type = 'news'; // 
  $module_name = basename(__FILE__, '.install'); // 
  // get db fields instances of content type
  $fields_instances = field_info_instances('node', $content_type);

  // get feature fields config&instance
  module_load_include('inc', $module_name, $module_name . '.features.field');
  if (function_exists($module_name . '_field_default_fields')) {
    $fields_features_info = call_user_func($module_name . '_field_default_fields');
  }

  // --- MIGRATION ---
  foreach ($fields_instances as $field_name => $field_instance) {
    // get db field config
    $field_info = field_info_field($field_name);

    // get feature field config
    $field_features_info = null;

    if (isset($fields_features_info['node-' . $content_type . '-' . $field_name])) {
      $field_features_info = $fields_features_info['node-' . $content_type . '-' . $field_name]['field_config'];
    }

    // update only our fields defines to 'datestamp' in feature.field
    if ($field_info['type'] == 'datetime' && $field_info['locked'] && $field_features_info && $field_features_info['type'] == 'datestamp') {
      foreach ($field_info['storage']['details']['sql'] as $type => $info_sql) {
        $table_name = array_shift(array_keys($info_sql));
        $column_name = $info_sql[$table_name]['value'];


        if (field_has_data($field_info)) { // there is data: migrate data and update column to int
          watchdog('system', t('Update the  column %column of table %table : migrate datas and update to datestamp.', array('%column' => $column_name, '%table' => $table_name)), NULL, WATCHDOG_WARNING);

          // create a temporary date field
          $param = array('type' => 'int', 'not null' => FALSE, 'default' => 0);
          db_add_field($table_name, $column_name . '_temp', $param);

          db_update($table_name)
                  ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
                  ->execute();

          // delete old column
          db_drop_field($table_name, $column_name);
          db_change_field($table_name, $column_name . '_temp', $column_name, array('type' => 'int'));

          //drupal_set_message(t('Update the  column %column of table %table : migrate datas and update to datestamp.', array('%column' => $column_name, '%table' => $table_name)), 'status');
        } else { // if there is no data: just update column to int
          watchdog('system', t('Update the  column %column of table %table : update to datestamp.', array('%column' => $column_name, '%table' => $table_name)), NULL, WATCHDOG_WARNING);
          db_change_field($table_name, $column_name, $column_name, array('type' => 'int'));
          //drupal_set_message(t('Update the  column %column of table %table : update to datestamp.', array('%column' => $column_name, '%table' => $table_name)), 'status');
        }
      }

      watchdog('system', t('Saving field config of %field', array('%field' => $field_name)), NULL, WATCHDOG_INFO);
      db_update('field_config')->fields(array('type' => 'datestamp'))->condition('id', $field_info['id'])->execute();
      //drupal_set_message(t('field_config of %field saved.', array('%field' => $field_name)), 'status');

      // --- ERROR LOGS ---
    } elseif ($field_info['type'] == 'datestamp') {
      watchdog('system', t('Field %field has been already converted to UNIX timestamp""', array('%field' => $field_name)), NULL, WATCHDOG_WARNING);
      //drupal_set_message(t('Field %field has been already converted to UNIX timestamp.', array('%field' => $field_name)), 'status');
    } elseif ($field_info['type'] == 'datetime') {
      if (!$field_features_info) {
        watchdog('system', t('Field %field not found in %feature', array('%field' => $field_name, '%feature' => $module_name . '.features.field.inc')), NULL, WATCHDOG_WARNING);
        //drupal_set_message(t('Field %field not found in %feature', array('%field' => $field_name, '%feature' => $module_name . '.features.field.inc')), 'warning');
      } elseif ($field_features_info['type'] != 'datestamp') {
        watchdog('system', t('Field %field is not a datestamp in %feature', array('%field' => $field_name, '%feature' => $module_name . '.features.field.inc')), NULL, WATCHDOG_WARNING);
        //drupal_set_message(t('Field %field is not a datestamp in %feature', array('%field' => $field_name, '%feature' => $module_name . '.features.field.inc')), 'warning');
      }
    }
  }
  // clear field cache
  field_cache_clear();
}
