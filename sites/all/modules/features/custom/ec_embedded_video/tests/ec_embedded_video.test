<?php

/**
 * @file
 * Tests for ec_embedded_video.module.
 */

/**
 * Defines a base class for testing the "Embedded video" module.
 */
class EmbeddedVideosWebTestCase extends DrupalWebTestCase {
  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'EC embedded video feature',
      'description' => 'Test the EC embedded videos feature.',
      'group' => 'Multisite - Media',
    );
  }

  protected $permissions = array(
    'access content',
    'administer content types',
    'administer nodes',
    'access administration pages',
    'create page content',
  );

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('ec_embedded_video');

    $this->web_user = $this->drupalCreateUser($this->permissions);
    $this->drupalLogin($this->web_user);
  }

  /**
   * Test if can be managed.
   */
  public function testPageShouldBeAccessible() {
    $this->drupalGet('admin/structure/types/manage');
    $this->assertResponse(200, 'User whith the right access can update content types');
    $this->createVideoField();

  }

  /**
   * Create and test content type.
   */
  public function createVideoField($node_type = 'page', $settings = array()) {
    $name = strtolower($this->randomName());
    $edit = array(
      'fields[_add_new_field][label]' => $name,
      'fields[_add_new_field][field_name]' => $name,
      'fields[_add_new_field][type]' => 'media',
      'fields[_add_new_field][widget_type]' => 'media_generic',
    );
    $field_name = 'field_' . $name;
    $this->drupalPost('admin/structure/types/manage/' . $node_type . '/fields', $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));

    $this->drupalPost(NULL, $settings, t('Save settings'));

    // Is field created?
    $this->assertRaw(t('Saved %label configuration', array('%label' => $name)), 'Field added');
    node_types_rebuild();
    menu_rebuild();

    return $field_name;
  }
}

 /**
  * Defines a base class for testing the "multisite_translations" module.
  */
class MultisiteEcEmbeddedVideosQAWebTestCase extends DrupalWebTestCase {
  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'ec_embedded_video QA tests',
      'description' => 'Test the ec_embedded_video features to ensure it follows QA requirements.',
      'group' => 'Multisite QA',
    );
  }

  /**
   * Test .info File.
   */
  public function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);
    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information.
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information.
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information.
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies.
    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"
      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');
    }
    // Remove tags taxonomy.
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  /**
   * Test .install File.
   */
  public function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }
}
