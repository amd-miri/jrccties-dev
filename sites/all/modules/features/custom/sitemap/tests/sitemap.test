<?php

/**
 * @file
 * Tests for PROJECTFEATURE_sitemap.module.
 * ECWeb MULTISITE QA
 */
class sitemapCore extends DrupalWebTestCase {

  protected $administrator;
  protected $visitor;
  protected $profile = 'standard';

  public static function getInfo() {
    return array(
        'name' => 'Sitemap',
        'description' => 'Test the sitemap features to ensure it follows QA requirements',
        'group' => 'Multisite Core Features',
    );
  }

  function setUp() {

    parent::setUp();
    module_enable(array('sitemap'), TRUE);
    drupal_flush_all_caches();
    $this->visitor = $this->drupalCreateUser(array(
        'access content',
    ));
    $this->administrator = new stdClass();
    $this->administrator = $this->drupalCreateUser(array(
        'access administration pages',
        'access content',
        'create article content',
        //investigate these permissions
            //'access site map',
            //'administer xmlsitemap',
    ));
    $this->drupalLogin($this->administrator);
  }

  /**
   *
   */
  function testSitemap() {
    // Fetch the current profile
    $profile = drupal_get_profile(); //standard
    $this->verbose('Profile ' . print_r($profile, TRUE));
    //Fetch the available permissions
    $permissions = user_permission_get_modules();
    $this->verbose('Permissions ' . print_r($permissions, TRUE));

    // Check the presence of module
    $this->assertTrue(module_exists('sitemap'), t('%feature_name feature enabled.', array('%feature_name' => 'sitemap')));
    $this->assertTrue(module_exists('site_map'), t('%module feature enabled.', array('%module' => 'site_map')));
    $this->assertTrue(module_exists('xmlsitemap'), t('%module feature enabled.', array('%module' => 'xmlsitemap')));


    $this->createSampleNodes($count = 3);

    // Access the sitemap
    $edit['url'] = 'sitemap';
    $this->drupalGet($edit['url']);
    $this->assertResponse(array(200), format_string('URL !url is accessible', array('!url' => $edit['url'])));

    $this->assertText('Site map', 'Site map page is accesible.');
    $this->clickLink(t('Front page of'));
    $this->assertResponse(200, 'Sitemap link is accesible');
  }

  /**
   * Create n nodes
   * @param type $count
   */
    public function createSampleNodes($count = 3) {
    $langcode = LANGUAGE_NONE;
    // Post $count article nodes.
    for ($i = 0; $i < $count; $i++) {
      $edit = array();
      $edit['title'] = $this->randomName();
      $edit["body[$langcode][0][value]"] = $this->randomName();
      $this->drupalPost('node/add/article', $edit, t('Save'));
    }
  }

}

/**
 * Defines a base class for testing the "multisite_translations" module.
 */
class Multisite_sitemapQAWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
        'name' => 'Sitemap QA tests',
        'description' => 'Test the sitemap features to ensure it follows QA requirements.',
        'group' => 'Multisite QA',
    );
  }

  /**
   * Test Info File.
   * TestFile <featurename>.info
   */
  function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);

    // Add name information. Ex: name=Newsletters.
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);

    // Add description information.
    // Ex: description = Publish and send newsletters to lists of subscribers.
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');

    // Add package information.
    // Ex: package = Multisite_features
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');

    // Add core information
    // Ex core = 7.x

    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');

    // Add php information
    // Ex: php = 5.2.4

    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');

    // Add version information (check if the version number matches with this page title)
    // Ex: version = 7.x-1.0
    $this->assertTrue(array_key_exists('version', $info));

    // Add feature information:
    // features[features_api][] = api:1
    $this->assertEqual($info['features']['features_api'][0], 'api:1', 'The Feature API dependency is available.');

    // Remove menu dependencies:

    if (array_key_exists('dependencies', $info)) {
      // dependencies[] = "menu"

      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');

    }
    // Check other dependencies (modules + features) to be sure they are needed
    // FIXME: manual check?
    // Remove tags taxonomy:
    // features[taxonomy][] = "tags"
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }

}
