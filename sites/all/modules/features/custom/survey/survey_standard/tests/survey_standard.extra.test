<?php

/**
 * @file
 * Tests for survey_standard.module.
 * ECWeb MULTISITE Feature Test
 */

/**
 * Defines a base class for testing the "survey_standard" module.
 */
class SurveyStandard extends DrupalWebTestCase {

  protected $privilegedUser;
  protected $contributorUser;

  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'Survey Standard feature test',
      'description' => 'Test the Survey Standard feature to ensure it works as intended.',
      'group' => 'Multisite Feature Test',
    );
  }

  /**
   * Configure environment: declare modules, users, permissions...
   */
  public function setUp() {
    parent::setUp(array('survey_standard'));
    $this->privilegedUser = $this->drupalCreateUserWithRole("administrator");
    $this->contributorUser = $this->drupalCreateUserWithRole("contributor");
    $this->drupalLogin($this->privilegedUser);
  }

  /**
   * Basic testing.
   */
  public function testSurveyStandar() {
    // Init.
    $this->feature_name = 'survey_standard';
    $feature_name = $this->feature_name;

    // Check the presence of module.
    $this->assertTrue(module_exists($feature_name), t('%feature_name feature enabled.', array('%feature_name' => $this->feature_name)));
    $this->drupalGet('survey');
    $this->assertResponse(200, 'User is allowed to access the page');

    // Content type creation.
    $settings = array(
      'type' => 'webform',
      'title' => $this->randomName(8),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(128)))),
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);

    $this->verbose('Survey Node created: ' . '</pre>' . print_r($node, TRUE) . '</pre>');
    $this->verbose('Survey Node created: ' . '</pre>' . print_r($settings['title'], TRUE) . '</pre>');

    // Permission to access the created content.
    $this->drupalGet('survey');
    $this->assertResponse(200, 'User is allowed to access the page');
    $this->assertRaw('node/add/webform', t('Link to create %feature_name available', array('%feature_name' => $this->feature_name)));
    $this->assertRaw(t('Create a new survey'), t('Button to create a new %feature_name is available', array('%feature_name' => $this->feature_name)));
    $this->clickLink(t('Create a new survey'));
    $this->drupalGet("node/{$node->nid}/webform");
    $this->assertResponse(200, 'Webform is accesible to user');
    $this->assertText(t("@title", array('@title' => $settings['title'])), 'Title is present and accesible to contributor user.');
    $this->assertRaw(t('Add'), 'Add more fields button is present.');
    $this->drupalLogin($this->contributorUser);

    // Content type creation.
    $settings = array(
      'type' => 'webform',
      'title' => $this->randomName(8),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(128)))),
      'status' => 1,
      'revisions' => NULL,
      'taxonomy' => NULL,
    );
    $node = $this->drupalCreateNode($settings);

    // Access Link Page was displayed.
    $this->drupalGet('survey/survey-title');
    $this->assertResponse(200, 'Contributor is allowed to access the survey');

    // Check the presence of h1.
    $elements = $this->xpath("//h1");
    $this->assertTrue(isset($elements[0]), t('The survey page contains a h1 title'));
    $this->assertRaw(t('Results'), t('%feature_name results are available to contributor.', array('%feature_name' => $this->feature_name)));
    // $this->drupalPost('admin/structure/block/add', $post, t('Submit'));
  }

  /**
   * Create a user with the give role.
   */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }
}
