<?php

/**
 * @file
 * Install updates and uninstall for basi config.
 */


/**
 * Test and report cce installation requirements.
 *
 * @param string $phase
 *   The current system installation phase.
 *
 * @return array()
 *   An array of system requirements.
 */
function cce_basic_config_requirements($phase) {
  $t = get_t();
  $requirements['install_tag'] = array(
    'title' => $t('Tag'),
    'value' => $t('%profile_tag ', array(
      '%profile_tag' => variable_get('multisite_version'),
    )),
    'severity' => REQUIREMENT_INFO,
    'weight' => -8,
  );
  return $requirements;
}


/**
 * Implements hook_install().
 */
function cce_basic_config_install() {
  $t = get_t();

  // Create a vocabulary dedicated to the classification.
  $vocabulary = (object) array(
    'name' => $t('classification'),
    'machine_name' => 'classification',
    'module' => 'cce_basic_config',
  );
  taxonomy_vocabulary_save($vocabulary);

  // Add default categories.
  $vocabulary = taxonomy_vocabulary_machine_name_load('classification');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('01000'),
    'description' => $t('Agriculture, farming'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('02000'),
    'description' => $t('Budget, financing, fraud'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('03000'),
    'description' => $t('European citizenship, right to vote, ombudsman, protection of privacy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('04000'),
    'description' => $t('Information society, communication, information, audiovisual, telecommunications, public opinion'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('05000'),
    'description' => $t('Competition, state aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('06000'),
    'description' => $t('Consumers, distribution, civil defence, nuclear safety, food safety'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('07000'),
    'description' => $t('Culture, tourism, sport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('08000'),
    'description' => $t('Education, teaching, vocational training, youth'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('09000'),
    'description' => $t('Enlargement, accession of new states'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('10000'),
    'description' => $t('Employment, work'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('11000'),
    'description' => $t('Energy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('12000'),
    'description' => $t('Type of business, company law'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('13000'),
    'description' => $t('Environment'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('14000'),
    'description' => $t('Tax system'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('15000'),
    'description' => $t('Industry'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('16000'),
    'description' => $t('Institutions'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('17000'),
    'description' => $t('Justice and home affairs, asylum, judicial cooperation, police cooperation, Schengen, visa, immigration, external frontiers, fight against crime, drugs, terrorism'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('18000'),
    'description' => $t('Free movement of capital, finance'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('19000'),
    'description' => $t('Free movement of goods, customs, public contracts, standardization'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('20000'),
    'description' => $t('Free movement of persons, right of establishment, workers'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('21000'),
    'description' => $t('Free movement of services, insurance, banks, credit, right of establishment, savings, public contracts'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('22000'),
    'description' => $t('Fisheries'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('23000'),
    'description' => $t('Regional policy, OCT'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('24000'),
    'description' => $t('Social policy, public health'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('25000'),
    'description' => $t('Research & development'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('26000'),
    'description' => $t('External relations, CFSP, development cooperation, humanitarian aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('27000'),
    'description' => $t('Trans-European networks'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('28000'),
    'description' => $t('Respect for human rights, racism, xenophobia'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('29000'),
    'description' => $t('Transport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('30000'),
    'description' => $t('Economic and monetary union, euro, single currency'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('31000'),
    'description' => $t('Statistics'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('32000'),
    'description' => $t('Language, multilingualism, translation, interpretation'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => $t('33000'),
    'description' => $t('Administration, management and human resources policy'),
  );
  taxonomy_term_save($term);

  // Manually save file document displays in dB.
  // Feature settings are not properly injected in dB.
  // Temporary process.
  db_delete('file_display')->execute();
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    if (substr($id_export, 0, 8) == 'document') {
      db_insert('file_display')
        ->fields(array(
          'name' => $id_export,
          'weight' => 0,
          'status' => ($settings_export->status) ? 1 : 0,
          'settings' => serialize($settings_export->settings),
        ))
        ->execute();
    }
  }

  // Add a fivestar rate widget.
  // Check if rate widget already exists.
  $rate_widgets = variable_get("rate_widgets");
  if (!$rate_widgets || count($rate_widgets) == 0) {
    $rate_widgets = array();
  }
  else {
    foreach ($rate_widgets as $rate_widget) {
      if ($rate_widget->name == 'rate_fivestar') {
        // The widget fivestar already exists.
        return;
      }
    }
  }

  $rate_widgets[1] = (object) array(
    'name' => 'rate_fivestar',
    'tag' => 'vote',
    'title' => 'rate_fivestar',
    'node_types' => array(),
    'comment_types' => array(),
    'options' => array(
      0 => array(
        0 => '0',
        1 => '1',
      ),
      1 => array(
        0 => '25',
        1 => '2',
      ),
      2 => array(
        0 => '50',
        1 => '3',
      ),
      3 => array(
        0 => '75',
        1 => '4',
      ),
      4 => array(
        0 => '100',
        1 => '5',
      ),
    ),
    'template' => 'fivestar',
    'node_display' => '2',
    'teaser_display' => FALSE,
    'comment_display' => '2',
    'node_display_mode' => '1',
    'teaser_display_mode' => '1',
    'comment_display_mode' => '1',
    'roles' => array(
      2 => '2',
      3 => 0,
      1 => 0,
      4 => 0,
      5 => 0,
    ),
    'allow_voting_by_author' => 1,
    'noperm_behaviour' => '1',
    'displayed' => '1',
    'displayed_just_voted' => '2',
    'description' => '',
    'description_in_compact' => TRUE,
    'delete_vote_on_second_click' => '0',
    'use_source_translation' => TRUE,
    'value_type' => 'percent',
    'theme' => 'rate_template_fivestar',
    'css' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.css',
    'js' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.js',
    'translate' => TRUE,
  );
  variable_set("rate_widgets", $rate_widgets);

  if (db_table_exists('captcha_points')) {
    db_update('captcha_points')
      ->fields(array('captcha_type' => 'default'))
      ->condition('form_id', 'contact_site_form')
      ->execute();

    db_update('captcha_points')
      ->fields(array('captcha_type' => 'default'))
      ->condition('form_id', 'user_register_form')
      ->execute();
  }
}

/**
 * Implements hook_uninstall().
 */
function cce_basic_config_uninstall() {
  // Manually remove config for file document display.
  // This process must be temporary.
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    if (substr($id_export, 0, 8) == 'document') {
      db_delete('file_display')
        ->condition('name', $id_export)
        ->execute();
    }
  }
}

/**
 * Implements hook_enable().
 */
function cce_basic_config_enable() {
  include_once DRUPAL_ROOT . '/includes/password.inc';

  // Add users acccounts.
  $account = new stdClass();
  $account->is_new = TRUE;
  $account->status = TRUE;
  $account->name = 'user_administrator';
  $account->pass = user_hash_password('pass');
  $account->mail = 'administrator@test.com';
  $account->init = 'administrator@test.com';
  $account->roles[3] = 'administrator';
  $account->field_firstname['und'][0]['value'] = 'John';
  $account->field_lastname['und'][0]['value'] = 'Smith';
  user_save($account);

  $account1 = new stdClass();
  $account1->is_new = TRUE;
  $account1->status = TRUE;
  $account1->name = 'user_contributor';
  $account1->pass = user_hash_password('pass');
  $account1->mail = 'contributor@test.com';
  $account1->init = 'contributor@test.com';
  $account1->roles[4] = 'contributor';
  $account1->field_firstname['und'][0]['value'] = 'John';
  $account1->field_lastname['und'][0]['value'] = 'Doe';
  user_save($account1);

  $account2 = new stdClass();
  $account2->is_new = TRUE;
  $account2->status = TRUE;
  $account2->name = 'user_editor';
  $account2->pass = user_hash_password('pass');
  $account2->mail = 'editor@test.com';
  $account2->init = 'editor@test.com';
  $account2->roles[5] = 'editor';
  $account2->field_firstname['und'][0]['value'] = 'John';
  $account2->field_lastname['und'][0]['value'] = 'Blake';
  user_save($account2);

  // Affect dummy contents to the user 'administrator'.
  $query = db_select('node', 'n');
  $query->condition('n.type', 'article', '=')
    ->fields('n', array('nid', 'title', 'uid'));
  $results = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($results as $result) {
    $node = node_load($result['nid']);
    $node->uid = $account->uid;
    node_save($node);
  }

  // Add blocks in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_to_add1 = array(
    'module' => 'system',
    'delta' => 'user-menu',
    'region' => 'tools',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['user-menu'] = $block_to_add1;

  $block_to_add2 = array(
    'module' => 'multisite_create_button',
    'delta' => 'create-content-button',
    'region' => 'tools',
    'weight' => 2,
  );
  $context->reactions['block']['blocks']['create-content-button'] = $block_to_add2;

  $block_to_add3 = array(
    'module' => 'search',
    'delta' => 'form',
    'region' => 'header_right',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['form'] = $block_to_add3;

  module_invoke('context', 'save', $context);
  variable_set('user_classes', 'btn btn-info btn-xs');
  variable_set('user_myaccount_data_image', 'user');
  // My Account.
  variable_set('user_logout_data_image', 'log-out');
  // Log out.

  // Add block easy_breadcrumb in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_easy_breadcrumb = array(
    'module' => 'easy_breadcrumb',
    'delta' => 'easy_breadcrumb',
    'region' => 'featured',
    'weight' => -18,
  );
  $context->reactions['block']['blocks']['easy_breadcrumb'] = $block_easy_breadcrumb;

  // Add menu service tools in site-wide context.
  $block_service_tools = array(
    'module' => 'menu',
    'delta' => 'menu-service-tools',
    'region' => 'header_top',
    'weight' => -9,
  );
  $context->reactions['block']['blocks']['block_service_tools'] = $block_service_tools;

  module_invoke('context', 'save', $context);
}

/**
 * Implements hook_disable().
 */
function cce_basic_config_disable() {
  drupal_set_message(t('The module cce_basic_config has been disabled on your site! Please contact FPFIS support to reactivate it.'));
  variable_del('user_classes');
  variable_del('user_myaccount_data_image');
  // My Account.
  variable_del('user_logout_data_image');
  // Log out.
}

/**
 * Implements hook_post_features_enable_feature().
 */
function cce_basic_config_post_features_enable_feature($component) {
  // Add footer ipg in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');
  $block_footer_ipg = array(
    'module' => 'cce_basic_config',
    'delta' => 'footer_ipg',
    'region' => 'footer',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['footer-ipg'] = $block_footer_ipg;

  module_invoke('context', 'save', $context);
}

/**
 * Add classification vocabulary, add file diplays settings.
 */
function cce_basic_config_update_7140() {

  // Create a vocabulary for classification.
  // Add default categories.
  $vocabulary = taxonomy_vocabulary_machine_name_load('classification');
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('01'),
    'description' => st('Agriculture, farming'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('02'),
    'description' => st('Budget, financing, fraud'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('03'),
    'description' => st('European citizenship, right to vote, ombudsman, protection of privacy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('04'),
    'description' => st('Information society, communication, information, audiovisual, telecommunications, public opinion'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('05'),
    'description' => st('Competition, state aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('06'),
    'description' => st('Consumers, distribution, civil defence, nuclear safety, food safety'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('07'),
    'description' => st('Culture, tourism, sport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('08'),
    'description' => st('Education, teaching, vocational training, youth'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('09'),
    'description' => st('Enlargement, accession of new states'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('10'),
    'description' => st('Employment, work'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('11'),
    'description' => st('Energy'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('12'),
    'description' => st('Type of business, company law'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('13'),
    'description' => st('Environment'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('14'),
    'description' => st('Tax system'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('15'),
    'description' => st('Industry'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('16'),
    'description' => st('Institutions'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('17'),
    'description' => st('Justice and home affairs, asylum, judicial cooperation, police cooperation, Schengen, visa, immigration, external frontiers, fight against crime, drugs, terrorism'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('18'),
    'description' => st('Free movement of capital, finance'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('19'),
    'description' => st('Free movement of goods, customs, public contracts, standardization'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('20'),
    'description' => st('Free movement of persons, right of establishment, workers'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('21'),
    'description' => st('Free movement of services, insurance, banks, credit, right of establishment, savings, public contracts'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('22'),
    'description' => st('Fisheries'),
  );
  taxonomy_term_save($term);
  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('23'),
    'description' => st('Regional policy, OCT'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('24'),
    'description' => st('Social policy, public health'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('25'),
    'description' => st('Research & development'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('26'),
    'description' => st('External relations, CFSP, development cooperation, humanitarian aid'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('27'),
    'description' => st('Trans-European networks'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('28'),
    'description' => st('Respect for human rights, racism, xenophobia'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('29'),
    'description' => st('Transport'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('30'),
    'description' => st('Economic and monetary union, euro, single currency'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('31'),
    'description' => st('Statistics'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('32'),
    'description' => st('Language, multilingualism, translation, interpretation'),
  );
  taxonomy_term_save($term);

  $term = (object) array(
    'vid' => $vocabulary->vid,
    'name' => st('33'),
    'description' => st('Administration, management and human resources policy'),
  );
  taxonomy_term_save($term);

  // Manually save file document displays in database.
  // The feature settings are not properly injected in database.
  // This process must be temporary.
  db_delete('file_display')->execute();
  $exports = cce_basic_config_file_default_displays();
  foreach ($exports as $id_export => $settings_export) {
    db_insert('file_display')
      ->fields(array(
        'name' => $id_export,
        'weight' => 0,
        'status' => ($settings_export->status) ? 1 : 0,
        'settings' => serialize($settings_export->settings),
      ))
      ->execute();
  }

  // Remove the mail address to the update modules notification.
  variable_del('update_notify_emails');

  // Disable update management module permissions for administrator role.
  $adm_rid = multisite_drupal_toolbox_get_rid('administrator');
  user_role_revoke_permissions($adm_rid, array(
    'administer software updates',
  ));

}

/**
 * Add password_policy rules and handle password_policy 2.x upgrade.
 */
function cce_basic_config_update_7150() {
  // Insert the password policy in dB.
  // Temporary since the module password_policy.
  $exports = cce_basic_config_default_password_policy();

  $schema = password_policy_schema();
  db_drop_table('password_policy');
  db_drop_table('password_policy_expiration');
  db_drop_table('password_policy_force_change');
  db_drop_table('password_policy_history');
  db_drop_table('password_policy_role');

  if (!db_table_exists('password_policy')) {
    db_create_table('password_policy', $schema['password_policy']);
  };
  if (!db_table_exists('password_policy_history')) {
    db_create_table('password_policy_history', $schema['password_policy_history']);
  };
  if (!db_table_exists('password_policy_notice_history')) {
    db_create_table('password_policy_notice_history', $schema['password_policy_notice_history']);
  };
  db_insert('password_policy')
    ->fields(array(
      'name' => 'Example policy',
      'config' => $exports['Example policy']->config,
    ))
    ->execute();
}

/**
 * Add search block.
 */
function cce_basic_config_update_7160() {
  // Add block site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_to_add = array(
    'module' => 'search',
    'delta' => 'form',
    'region' => 'header_right',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['form'] = $block_to_add;

  module_invoke('context', 'save', $context);
}


/**
 * Update classification vocabulary ids.
 */
function cce_basic_config_update_7170() {

  // Get the "classification" vid.
  $classification = NULL;

  $vocabularies = taxonomy_get_vocabularies(NULL);
  foreach ($vocabularies as $vocab_object) {
    if ($vocab_object->name == "classification") {
      $classification = $vocab_object->vid;
      if ($classification) {
        $results = db_query("UPDATE {taxonomy_term_data} SET NAME=concat(name, :name) WHERE vid=:vid", array(':name' => '000', ':vid' => $classification));
      }
      return;
    }
  }
}

/**
 * Add rate widget fivestar.
 */
function cce_basic_config_update_7180() {
  // Check if rate widget fivestar already exists.
  $rate_widgets = variable_get("rate_widgets");
  if (!$rate_widgets || count($rate_widgets) == 0) {
    $rate_widgets = array();
  }
  else {
    foreach ($rate_widgets as $rate_widget) {
      if ($rate_widget->name == 'rate_fivestar') {
        // The widget fivestar already exists.
        return;
      }
    }
  }

  $rate_widgets[1] = (object) array(
    'name' => 'rate_fivestar',
    'tag' => 'vote',
    'title' => 'rate_fivestar',
    'node_types' => array(),
    'comment_types' => array(),
    'options' => array(
      0 => array(
        0 => '0',
        1 => '1',
      ),
      1 => array(
        0 => '25',
        1 => '2',
      ),
      2 => array(
        0 => '50',
        1 => '3',
      ),
      3 => array(
        0 => '75',
        1 => '4',
      ),
      4 => array(
        0 => '100',
        1 => '5',
      ),
    ),
    'template' => 'fivestar',
    'node_display' => '2',
    'teaser_display' => FALSE,
    'comment_display' => '2',
    'node_display_mode' => '1',
    'teaser_display_mode' => '1',
    'comment_display_mode' => '1',
    'roles' => array(
      2 => '2',
      3 => 0,
      1 => 0,
      4 => 0,
      5 => 0,
    ),
    'allow_voting_by_author' => 1,
    'noperm_behaviour' => '1',
    'displayed' => '1',
    'displayed_just_voted' => '2',
    'description' => '',
    'description_in_compact' => TRUE,
    'delete_vote_on_second_click' => '0',
    'use_source_translation' => TRUE,
    'value_type' => 'percent',
    'theme' => 'rate_template_fivestar',
    'css' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.css',
    'js' => 'sites/all/modules/contributed/rate/templates/fivestar/fivestar.js',
    'translate' => TRUE,
  );
  variable_set("rate_widgets", $rate_widgets);
}

/**
 * Force home and myworkbench menu items at left in main menu.
 */
function cce_basic_config_update_7190() {
  db_update('menu_links')
    ->fields(array('weight' => '-30'))
    ->condition('link_title', 'My workbench', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();

  db_update('menu_links')
    ->fields(array('weight' => '-50'))
    ->condition('link_title', 'Home', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();
}

/**
 * Move menu item myworkbench from main menu to user menu.
 */
function cce_basic_config_update_7191() {
  db_update('menu_links')
    ->fields(array(
      'weight' => '-30',
      'menu_name' => 'user-menu',
      )
     )
    ->condition('link_title', 'My workbench', '=')
    ->condition('menu_name', 'main-menu', '=')
    ->execute();
}

/**
 * Set default configuration for menu items.
 *
 * Set configuration for captcha module.
 * Date field migration.
 */
function cce_basic_config_update_7192() {
  // Home.
  $ml_home = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', '<front>')
    ->condition('menu_name', 'main-menu')
    ->execute()
    ->fetchField();

  $options_home = unserialize($ml_home);
  $options_home['attributes']['data-display-title'] = 0;
  $options_home['attributes']['data-image'] = 'home';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_home)))
    ->condition('link_path', '<front>')
    ->condition('menu_name', 'main-menu')
    ->execute();

  // Login.
  $ml_login = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user/login')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_login = unserialize($ml_login);
  $options_login['attributes']['class'][] = 'btn btn-default';
  $options_login['attributes']['data-image'] = 'log-in';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_login)))
    ->condition('link_path', 'user/login')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // Logout.
  $ml_logout = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user/logout')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_logout = unserialize($ml_logout);
  $options_logout['attributes']['class'][] = 'btn btn-default btn-xs';
  $options_logout['attributes']['data-image'] = 'log-out';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_logout)))
    ->condition('link_path', 'user/logout')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // My workbench.
  $ml_workbench = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'admin/workbench')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_workbench = unserialize($ml_workbench);
  $options_workbench['attributes']['class'][] = 'btn btn-info btn-xs';
  $options_workbench['attributes']['data-image'] = 'list-alt';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_workbench)))
    ->condition('link_path', 'admin/workbench')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // My account.
  $ml_account = db_select('menu_links', 'ml')
    ->fields('ml', array('options'))
    ->condition('link_path', 'user')
    ->condition('menu_name', 'user-menu')
    ->execute()
    ->fetchField();

  $options_account = unserialize($ml_account);
  $options_account['attributes']['class'][] = 'btn btn-default btn-xs';
  $options_account['attributes']['data-image'] = 'user';

  db_update('menu_links')
    ->fields(array('options' => serialize($options_account)))
    ->condition('link_path', 'user')
    ->condition('menu_name', 'user-menu')
    ->execute();

  // Captcha.
  variable_set('captcha_default_challenge', 'image_captcha/Image');
  variable_set('image_captcha_fonts', array(
    'sites/all/modules/contributed/captcha/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf' => 'sites/all/modules/contributed/captcha/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf',
    'sites/all/modules/contributed/captcha/image_captcha/fonts/Tuffy/Tuffy.ttf' => 'sites/all/modules/contributed/captcha/image_captcha/fonts/Tuffy/Tuffy.ttf'));
  variable_set('image_captcha_distortion_amplitude', '5');
  variable_set('image_captcha_bilinear_interpolation', 1);

  if (db_table_exists($captcha_points)) {
    db_update('captcha_points')
    ->fields(array('captcha_type' => 'default'))
    ->condition('form_id', 'contact_site_form')
    ->execute();
  }

  // Revoke 'use PHP to import nodes' 'administer varnish' permissions.
  foreach (array_keys(user_roles()) as $rid) {
    user_role_revoke_permissions($rid, array('use PHP to import nodes', 'administer varnish'));
  }
}

 /**
  * Date field migration.
  */
function cce_basic_config_update_7193() {

  // $content type : content type that contains fiels to replace.
  // $module_name : module that contains fields.
  $content_type = 'article';
  $module_name = basename(__FILE__, '.install');
  // Get db fields instances of content type.
  $fields_instances = field_info_instances('node', $content_type);

  // Get feature fields config&instance.
  module_load_include('inc', $module_name, $module_name . '.features.field');
  if (function_exists($module_name . '_field_default_fields')) {
    $fields_features_info = call_user_func($module_name . '_field_default_fields');
  }

  // Migration.
  foreach ($fields_instances as $field_name => $field_instance) {
    // Get db field config.
    $field_info = field_info_field($field_name);

    // Get feature field config.
    $field_features_info = NULL;

    if (isset($fields_features_info['node-' . $content_type . '-' . $field_name])) {
      $field_features_info = $fields_features_info['node-' . $content_type . '-' . $field_name]['field_config'];
    }

    // Update only our fields defines to 'datestamp' in feature.field.
    if ($field_info['type'] == 'datetime' && $field_info['locked'] && $field_features_info && $field_features_info['type'] == 'datestamp') {
      foreach ($field_info['storage']['details']['sql'] as $type => $info_sql) {
        $table_name = array_shift(array_keys($info_sql));

        foreach ($info_sql[$table_name] as $id => $column_name) {

          if (field_has_data($field_info)) {
            // There is data: migrate data and update column to int.
            watchdog('system', 'Update the  column ' . $column_name . ' of table ' . $table_name . ' : migrate datas and update to datestamp.', NULL, WATCHDOG_WARNING);

            // Create a temporary date field.
            $param = array('type' => 'int', 'not null' => FALSE, 'default' => 0);
            db_add_field($table_name, $column_name . '_temp', $param);

            db_update($table_name)
                    ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
                    ->execute();

            // Delete old column.
            db_drop_field($table_name, $column_name);
            db_change_field($table_name, $column_name . '_temp', $column_name, array('type' => 'int'));

          }
          else {
            // If there is no data: just update column to int.
            watchdog('system', 'Update the  column ' . $column_name . ' of table ' . $table_name . ' : update to datestamp.', NULL, WATCHDOG_WARNING);
            db_change_field($table_name, $column_name, $column_name, array('type' => 'int'));
          }
        }
      }

      watchdog('system', 'Saving field config of ' . $field_name, NULL, WATCHDOG_INFO);
      db_update('field_config')->fields(array('type' => 'datestamp'))->condition('id', $field_info['id'])->execute();

      // Error logs.
    }
    elseif ($field_info['type'] == 'datestamp') {
      watchdog('system', 'Field ' . $field_name . ' has been already converted to UNIX timestamp""', NULL, WATCHDOG_WARNING);

    }
    elseif ($field_info['type'] == 'datetime') {
      if (!$field_features_info) {
        watchdog('system', 'Field ' . $field_name . ' not found in ' . $module_name . '.features.field.inc', NULL, WATCHDOG_WARNING);
      }
      elseif ($field_features_info['type'] != 'datestamp') {
        watchdog('system', 'Field ' . $field_name . ' is not a datestamp in ' . $module_name . '.features.field.inc', NULL, WATCHDOG_WARNING);
      }
    }
  }
  field_cache_clear();

  // File format translation.
  $format = array("full_html" => "full_html", "plain_text" => "plain_text");
  variable_set("i18n_string_allowed_formats", $format);
}

 /**
  * Implements hook_update_N().
  */
function cce_basic_config_update_7194() {
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('show format selection for node'));
}

 /**
  * Feature revert field and field_group.
  */
function cce_basic_config_update_7195() {
  // Handle the change of the maxlength of the field field_caption.
  db_query('ALTER TABLE `field_data_field_caption` CHANGE `field_caption_value` `field_caption_value` VARCHAR(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL;');
  db_query('ALTER TABLE `field_revision_field_caption` CHANGE `field_caption_value` `field_caption_value` VARCHAR(512) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL;');

  $qry = "SELECT data FROM 'field_config' WHERE field_name = :field_name";
  $result = db_query($qry, array(':field_name' => 'field_caption'))->fetchObject();
  $data = unserialize($result->data);
  $data['settings']['max_length'] = 512;
  $serialized_data = serialize($data);
  $qry = "UPDATE 'field_config' SET data = :data WHERE field_name = :field_name";
  db_query($qry, array(':data' => $serialized_data, ':field_name' => 'field_caption'));

  drupal_flush_all_caches();

  // Revert only fields (for modify weight).
  features_revert(array('cce_basic_config' => array('field')));
  features_revert(array('cce_basic_config' => array('field_group')));
}

 /**
  * Add default configuration for easy_breadcrumb.
  */
function cce_basic_config_update_7196() {
  variable_set('easy_breadcrumb-capitalizator_mode', 'ucfirst');
  variable_set('easy_breadcrumb-include_home_segment', 0);
  variable_set('easy_breadcrumb-include_invalid_paths', 0);
  variable_set('easy_breadcrumb-segments_separator', '>');

  // Add block in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_to_add = array(
    'module' => 'easy_breadcrumb',
    'delta' => 'easy_breadcrumb',
    'region' => 'featured',
    'weight' => -18,
  );
  $context->reactions['block']['blocks']['easy_breadcrumb'] = $block_to_add;

  module_invoke('context', 'save', $context);
}

 /**
  * Add menu service_tools in banner.
  *
  * Change date format : set european format
  */
function cce_basic_config_update_7197() {
  // Add block in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');

  $block_service_tools = array(
    'module' => 'menu',
    'delta' => 'menu-service-tools',
    'region' => 'header_top',
    'weight' => -9,
  );
  $context->reactions['block']['blocks']['block_service_tools'] = $block_service_tools;

  module_invoke('context', 'save', $context);

  // Change date format.
  variable_set("date_format_long", "l, j F, Y - H:i");
  variable_set("date_format_medium", "D, d/m/Y - H:i");
  variable_set("date_format_short", "d/m/Y - H:i");

}

/**
 * Deactivate orphan content types events, news, and discussion. 
 *
 * Enable Library tab.
 *
 * Add block footer ipg in region footer.
 */
function cce_basic_config_update_7198() {
  node_types_rebuild();
  $event_type = node_type_load('event');
  $news_type = node_type_load('news');
  $discussion_type = node_type_load('discussion');

  if (!module_exists('events_core') && ($event_type->disabled == '0')) {
    multisite_drupal_toolbox_disable_content_type('event');
    drupal_set_message(t('Orphan content type event has been disabled.'));
  }
  if (!module_exists('news_core') && ($news_type->disabled == '0')) {
    multisite_drupal_toolbox_disable_content_type('news');
    drupal_set_message(t('Orphan content type news has been disabled.'));
  }
  if (!module_exists('multisite_forum_core') && ($discussion_type->disabled == '0')) {
    multisite_drupal_toolbox_disable_content_type('discussion');
    drupal_set_message(t('Orphan content type discussion has been disabled.'));
  }

  // Adding Libray tab as default.
  $plugins = variable_get('media__wysiwyg_browser_plugins');
  if (!in_array('media_default--media_browser_1', $plugins)) {
    array_push($plugins, 'media_default--media_browser_1');
    variable_set('media__wysiwyg_browser_plugins', $plugins);
  }

  // Add footer ipg in site-wide context.
  $context = module_invoke('context', 'load', 'site_wide');
  $block_footer_ipg = array(
    'module' => 'cce_basic_config',
    'delta' => 'footer_ipg',
    'region' => 'footer',
    'weight' => 1,
  );
  $context->reactions['block']['blocks']['footer-ipg'] = $block_footer_ipg;

  module_invoke('context', 'save', $context);
}

/**
 * Add 'video' tag to 'security_allowed_tags' variable.
 */
function cce_basic_config_update_7199() {
  $tags = variable_get('security_allowed_tags');
  $tags .= "\nvideo";
  variable_set('security_allowed_tags', $tags);
  
  variable_set('print_pdf_pdf_tool', 'print_pdf_mpdf|sites/all/libraries/mpdf/mpdf.php');
  variable_set('multisite_version', '1.7');
}
