<?php

/**
 * @file
 * Contains functions for the mapmock module.
 */

/**
 * Turns string into a user- and machine-friendly short text.
 *
 * Used among others in a URL to identify and describe a resource.
 */
function mapmock_slugify($string) {
  return strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', check_plain($string)));
}

/**
 * Creates the topics taxonomy term.
 */
function mapmock_create_taxonomy_term_topics() {
  $t = get_t();

  // Creates the vocabulary if it does not exist already.
  $vocabulary = taxonomy_vocabulary_machine_name_load('topics');
  if ($vocabulary) {
    return;
  }
  else {
    $obj = (object) array();
    $obj->name = "Topics";
    $obj->description = "Flexible topic categorisations";
    $obj->machine_name = "topics";
    $obj->hierarchy = 2;
    $obj->module = "taxonomy";
    taxonomy_vocabulary_save($obj);
  }
}

/**
 * Creates the node type den.
 */
function mapmock_create_node_type_den() {

  $t = get_t();

  // Defines the base node type.
  $base_node_type = array(
    'type' => 'den',
    'name' => "Pirate's den",
    'base' => 'node_content',
    'description' => "This is a Pirate's den node type.",
    'body_label' => 'Description',
  );
  $node_type = node_type_set_defaults($base_node_type);
  node_add_body_field($node_type);

  // Checks if content type is being created or updated.
  $status = node_type_save($node_type);

  // Logs the results depending on action.
  $t_args = array('%name' => $node_type->name);
  if ($status == SAVED_UPDATED) {
    drupal_set_message($t('The content type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) {
    drupal_set_message($t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types'));
  }

}

/**
 * Defines and creates topic field.
 */
function mapmock_create_field_topics() {
  $t = get_t();

  if (field_info_field('topics')) {
    drupal_set_message($t('Field topics not created because it exists already'));
  }
  else {
    $array_fields = array(

      // Defines the topics term field/
      'topics' => array(
        'field_name' => 'topics',
        'cardinality' => -1,
        'foreign keys' => array(
          'tid' => array(
            'columns' => array(
              'tid' => 'tid',
            ),
            'table' => 'taxonomy_term_data',
          ),
        ),
        'indexes' => array(
          'tid' => array(
            0 => 'tid',
          ),
        ),
        'settings' => array(
          'allowed_values' => array(
            0 => array(
              'vocabulary' => 'topics',
              'parent' => '0',
            ),
          ),
        ),
        'type' => 'taxonomy_term_reference',
      ),
    );

    // Creates the defined field(s).
    foreach ($array_fields as $field) {
      field_create_field($field);
    }
  }

  // Defines the topic field instance for the content type den.
  $t = get_t();
  $array_instances = array(
    'topics' => array(
      'field_name' => 'topics',
      'label' => $t('Topics'),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'taxonomy',
          'settings' => array(),
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
      'entity_type' => 'node',
      'bundle' => 'den',
    ),
  );

  // Creates the field instance on the user entity.
  foreach ($array_instances as $instance) {
    field_create_instance($instance);
  }

}

/**
 * Creates the nuts region field.
 */
function mapmock_create_field_nuts_region() {

  // Defines the field instance for the user entity.
  $t = get_t();
  $array_instances = array(
    'nuts_region' => array(
      'field_name' => 'nuts_region',
      'label' => $t('Nuts region'),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'taxonomy',
          'settings' => array(),
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
      'entity_type' => 'node',
      'bundle' => 'den',
    ),
  );

  // Creates the field instance on the user entity.
  foreach ($array_instances as $instance) {
    field_create_instance($instance);
  }

}

/**
 * Creates the nuts region field.
 */
function mapmock_create_field_location() {

  $array_fields = array(

    // Defines the location field/
    'location' => array(
      'field_name' => 'location',
      'type' => 'geofield',
      'cardinality' => 1,
    ),
  );

  // Defines the field instances.
  $t = get_t();
  $array_instances = array(
    'location' => array(
      'field_name' => 'location',
      'label' => $t('Location'),
      'widget' => array(
        'active' => 1,
        'module' => 'geofield',
        'settings' => array(),
        'type' => 'geofield_latlon',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'geofield_latlon',
          'module' => 'geofield',
          'settings' => array(
            'data' => 'full',
            'format' => 'decimal_degrees',
            'labels' => 1,
          ),
        ),
      ),
      'entity_type' => 'node',
      'bundle' => 'den',
    ),
  );

  // Creates the defined field(s).
  foreach ($array_fields as $field) {
    field_create_field($field);
  }

  // Creates the field instance on the user entity.
  foreach ($array_instances as $instance) {
    field_create_instance($instance);
  }

}
