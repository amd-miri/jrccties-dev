<?php

/**
 * @file
 * Tests NUTS regions tools modules.
 */

/**
 * Performs test on the mapeditor module.
 *
 * @todo improve to test more.
 */

class MapeditorTestCase extends DrupalWebTestCase {

  // $adminUser is a user with permission to administer blocks.
  protected $adminUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Mapeditor: content type',
      'description' => 'Test the Mapeditor content type',
      'group' => 'Mapeditor',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array(
      'mapeditor',
    ));

    // Disables apachesolr search to prevent time outs locally.
    module_disable(array('apachesolr_search'), TRUE);

    $this->adminUser = $this->drupalCreateUser(
      array(
        'access content',
        'administer users',
        'administer site configuration',
        'administer nodes',
        'administer content types',
        'create mapeditor_map content',
      )
    );
  }

  /**
   * Test node access permissions.
   */
  protected function testContentTypesAvailability() {
    $this->drupalLogin($this->adminUser);
    $this->drupalGet("admin/structure/types");
    $this->assertText('The map type allows creating a map in simple steps.', 'Map type description found on the types admin page.');
    $this->drupalGet('admin/structure/types/manage/mapeditor-map');
    $this->assertResponse(200, 'Content type Mapeditor Map is available');
    $this->drupalLogout();
  }

  /**
   * Tests the availibility of (some) fields in the map node form.
   */
  public function testMapeditorNode() {
    $this->drupalLogin($this->adminUser);

    // Checks is Mapedit map node form is OK.
    $this->drupalGet("node/add/mapeditor-map");
    $this->assertResponse(200, 'Node form Mapeditor Map is available');
    $this->assertField('mapeditor_geobundle[und]', 'Content to be shown field is available');
    $this->assertField('mapeditor_tile_layer[und]', 'Tile layer field is available');
    $this->assertField('mapeditor_height[und][0][value]', 'Height field is available');
    $this->assertField('title', 'Title field is available');

    // Logs out.
    $this->drupalLogout();

  }

  /**
   * Test Info File.
   *
   * TestFile <featurename>.info
   */
  public function testInfoFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.info';
    $info = drupal_parse_info_file($path);
    $this->assertTrue(array_key_exists('name', $info), 'The module\'s name is available.' . $module);
    $this->assertTrue(array_key_exists('description', $info), 'The module\'s description is available.');
    $this->assertTrue(array_key_exists('package', $info), 'The module\'s package is available.');
    $this->assertTrue(array_key_exists('core', $info), 'The Drupal core version is available.');
    $this->assertEqual($info['core'], '7.x');
    $this->assertTrue(array_key_exists('php', $info), 'The PHP version info is available.');
    $this->assertEqual($info['php'], '5.2.4');
    $this->assertTrue(array_key_exists('version', $info));
    $this->assertEqual($info['features']['features_api'][0], 'api:2', 'The Feature API dependency is available.');
    if (array_key_exists('dependencies', $info)) {
      $this->assertFalse(in_array('menu', $info['dependencies']), 'There is no reference to the menu dependency.');
    }
    if (array_key_exists('features', $info) && array_key_exists('taxonomy', $info['features'])) {
      $this->assertFalse(in_array('tags', $info['features']['taxonomy']), 'The dependency to the tags taxonomy has been removed.');
    }
  }

  /**
   * Test install file.
   */
  public function testInstallFile() {
    $module = basename(__FILE__, ".test");
    $path = drupal_get_path('module', $module) . '/' . $module . '.install';
    $data = file_get_contents($path);
    $this->assertTrue(strpos($data, $module . '_install'), 'The module contains a hook_install');
    $this->assertTrue(strpos($data, $module . '_uninstall'), 'The module contains a hook_uninstall');
    $this->assertTrue(strpos($data, $module . '_enable'), 'The module contains a hook_enable');
    $this->assertTrue(strpos($data, $module . '_disable'), 'The module contains a hook_disable');
  }
}
