<?php

/**
 * @file
 * Code for the jrccties_core feature.
 */

define('JRCCTIES_CORE_OG_ENTITYFORM_AUDIENCE_FIELD', 'og_group_ref');

/**
 * JRCCTIES_CORE_NEWSLETTER_PERIOD constant.
 */
define('JRCCTIES_CORE_NEWSLETTER_PERIOD', variable_get('jrccties_core_newsletter_period', '-1 month'));

/**
 * JRCCTIES_CORE_NEWSLETTER_TIMESTAMP_INCREASE constant.
 */
define('JRCCTIES_CORE_NEWSLETTER_TIMESTAMP_INCREASE', variable_get('jrccties_core_timestamp_increase', '1 month'));

/**
 * Admin form for newsletter settings.
 */
function jrccties_newsletter_settings_form($form, $form_state) {

  $form['jrccties_core_newsletter_period'] = array(
    '#type' => 'select',
    '#title' => t('Newsletter period'),
    '#options' => array(
      '-1 minute' => t('-1 minute'),
      '-1 week' => t('-1 week'),
      '-2 weeks' => t('-2 weeks'),
      '-1 month' => t('-1 month'),
    ),
    '#default_value' => variable_get('jrccties_core_newsletter_period', '-1 month'),
    '#description' => t('The system will look for content that is created between now and the value specified.'),
  );

  $form['jrccties_core_timestamp_increase'] = array(
    '#type' => 'select',
    '#title' => t('Timestamp increase'),
    '#options' => array(
      '1 minute' => t('1 minute'),
      '1 week' => t('1 week'),
      '2 weeks' => t('2 weeks'),
      '1 month' => t('1 month'),
    ),
    '#default_value' => variable_get('jrccties_core_timestamp_increase', '1 month'),
    '#description' => t('After sending an email the system increases the timestamp for the last sent newsletter by this amount (converted into seconds)'),
  );

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
  ];
  return $form;
}

/**
 * Submit handler for the newsletter settings form.
 */
function jrccties_newsletter_settings_form_submit($form, $form_state) {
  variable_set('jrccties_core_newsletter_period', $form_state['values']['jrccties_core_newsletter_period']);
  variable_set('jrccties_core_timestamp_increase', $form_state['values']['jrccties_core_timestamp_increase']);
}

/**
 * Returns all og_membership bundles where we have field_newsletter_subscribe.
 *
 * @return mixed
 *   Array of og_membership bundles.
 */
function _jrccties_core_get_newsletter_communities() {
  $query = db_select('field_config_instance', 'fci')
    ->fields('fci', array('bundle'))
    ->condition('fci.field_name', 'field_newsletter_subscribe')
    ->condition('fci.entity_type', 'og_membership');
  return $query->execute()->fetchCol(0);
}

/**
 * Gets subscribed users.
 *
 * @return array
 *   An array of user ids that have subscribed to the weekly newsletter.
 */
function _jrccties_core_get_subscribed_users() {
  // Gets all ids that have subscribed and the timestamp is older than a week.
  $query = db_select('field_data_field_newsletter_subscribe', 'fdfns');
  $query->leftJoin('og_membership', 'og', 'fdfns.entity_id = og.id');
  $query->leftJoin('field_data_field_newsletter_timestamp', 'fdfnt', 'og.etid = fdfnt.entity_id');
  $query->addField('og', 'etid');
  $query
    ->condition('fdfns.field_newsletter_subscribe_value', 1)
    ->condition('fdfnt.field_newsletter_timestamp_value', strtotime(JRCCTIES_CORE_NEWSLETTER_PERIOD), '<')
    ->groupBy('etid');
  return $query->execute()->fetchCol(0);
}

/**
 * Gets list of communities that have subscriptions.
 *
 * @param array $uids
 *   Array of user ids.
 *
 * @return mixed
 *   Array of nids that are the community nodes.
 */
function _jrccties_core_get_subscribed_communities(array $uids) {
  $newsletter_communities = _jrccties_core_get_newsletter_communities();
  $query = db_select('og_membership', 'om')
    ->fields('om', array('gid'))
    ->condition('om.type', $newsletter_communities, 'IN');
  $query->leftJoin('field_data_field_newsletter_subscribe', 'fdfns', 'om.id = fdfns.entity_id');
  $query->condition('om.entity_type', 'user')
    ->condition('om.etid', $uids, 'IN')
    ->condition('fdfns.field_newsletter_subscribe_value', 1)
    ->groupBy('gid');

  return $query->execute()->fetchCol(0);
}

/**
 * Gets latest content for given communities.
 *
 * @param array $gids
 *   Array of group ids.
 *
 * @return array
 *   An array of content to be rendered in the email template.
 */
function _jrccties_core_generate_latest_content(array $gids) {
  // Generate latest content per community and store in an array.
  $latest_content = array();
  $link_options = array(
    'absolute' => TRUE,
    'attributes' => array(
      'class' => array('newsletter-link'),
    ),
  );
  foreach ($gids as $gid) {
    $query = db_select('node', 'n')
      ->fields('n', array('title', 'nid', 'created', 'type'));
    $query->leftJoin('og_membership', 'ogm', "n.nid = ogm.etid AND ogm.entity_type = 'node'");
    $query->condition('ogm.gid', $gid)
      ->condition('n.status', 1)
      ->condition('n.type', array(
        'jrc_com_article',
        'audio',
        'page',
        'discussion',
        'document',
        'event',
        'news',
        'photo',
        'video_page',
      ), 'IN'
      )
      ->condition('n.created', strtotime(JRCCTIES_CORE_NEWSLETTER_PERIOD), '>')
      ->orderBy('n.created', 'DESC');
    $results = $query->execute()->fetchAll();

    foreach ($results as $result) {
      if (!isset($latest_content[$gid]['title'])) {
        $group_node = node_load($gid);
        $latest_content[$gid]['title'] = l($group_node->title, url("node/$gid"), $link_options);
        $latest_content[$gid]['logo'] = theme('image_style', array('style_name' => 'media_thumbnail', 'path' => $group_node->field_thumbnail[LANGUAGE_NONE][0]['uri']));
      }
      $latest_content[$gid]['links'][] = l($result->title, url("node/$result->nid"), $link_options);

    }
  }
  return $latest_content;
}

/**
 * Gets list of groups per user.
 *
 * @param int $uid
 *   The user id.
 *
 * @return mixed
 *   An array of group ids.
 */
function _jrccties_core_get_groups_per_user($uid) {
  $newsletter_communities = _jrccties_core_get_newsletter_communities();
  $query = db_select('og_membership', 'ogm')
    ->fields('ogm', array('gid'))
    ->condition('ogm.etid', $uid)
    ->condition('ogm.type', $newsletter_communities, 'IN')
    ->condition('ogm.entity_type', 'user');
  return $query->execute()->fetchCol(0);
}

/**
 * Gets user mail by user id.
 *
 * @param int $uid
 *   The user id.
 *
 * @return string
 *   The email of the user.
 */
function _jrccties_core_get_user_mail_by_uid($uid) {
  $query = db_select('users', 'u')
    ->fields('u', array('mail'))
    ->condition('uid', $uid)
    ->execute()
    ->fetchField();
  return $query;
}

/**
 * Generates weekly mails.
 */
function _jrccties_core_generate_mails() {

  $subscribed_users = _jrccties_core_get_subscribed_users();
  if (!$subscribed_users) {
    return;
  }
  $subscribed_communities = _jrccties_core_get_subscribed_communities($subscribed_users);
  $latest_content = _jrccties_core_generate_latest_content($subscribed_communities);

  foreach ($subscribed_users as $uid) {
    $content_per_user = array();
    $communities_per_user = _jrccties_core_get_groups_per_user($uid);
    foreach ($communities_per_user as $gid) {
      if (isset($latest_content[$gid])) {
        $content_per_user[] = $latest_content[$gid];
      }
    }

    if (!$content_per_user) {
      continue;
    }

    $account = user_load($uid);

    $email_body = theme('newsletter_digest', array(
      'realname' => $account->realname,
      'content_per_user' => $content_per_user,
      'unsubscribe_link' => l(t('unsubscribe'), 'newsletter', array(
        'attributes' => array(
          'class' => array('newsletter-link'),
        ),
      )),
    ));

    $module = 'jrccties_core';
    $key = 'newsletter_digest';
    $to = _jrccties_core_get_user_mail_by_uid($uid);

    $params = array(
      'subject' => t('Weekly Newsletter'),
      'body' => $email_body,
    );

    $mail = drupal_mail($module, $key, $to, language_default(), $params, NULL, TRUE);
    if (!$mail['result']) {
      $error_msg = 'Failed to send Weekly Newsletter';
      watchdog('jrccties_core', $error_msg, array(), WATCHDOG_ALERT);
    }
    else {
      $account->field_newsletter_timestamp[LANGUAGE_NONE][0]['value'] = strtotime(JRCCTIES_CORE_NEWSLETTER_TIMESTAMP_INCREASE);
      user_save($account);
    }

  }
}

/**
 * Implements hook_mail().
 */
function jrccties_core_mail($key, &$message, $params) {
  switch ($key) {
    case "newsletter_digest":
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_theme().
 */
function jrccties_core_theme($existing, $type, $theme, $path) {
  if ($type == 'module') {
    return array(
      'newsletter_digest' => array(
        'variables' => array(),
        'template' => 'newsletter-digest',
        'path' => drupal_get_path('module', 'jrccties_core') . '/theme',
      ),

    );
  }
}

/**
 * Implements hook_og_membership_presave().
 */
function jrccties_core_og_membership_presave(OgMembership $og_membership) {
  global $user;

  $membership_types = _jrccties_core_get_newsletter_communities();

  if (in_array($og_membership->type, $membership_types)) {
    $account = user_load($user->uid);
    $account->field_newsletter_timestamp[LANGUAGE_NONE][0]['value'] = $og_membership->created;
    user_save($account);
  }
}

/**
 * Implements hook_cron().
 */
function jrccties_core_cron() {
  _jrccties_core_generate_mails();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrccties_core_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  unset($form['contact']);
  unset($form['#metatags']);
  unset($form['redirect']);
  unset($form['account']['status']);
  unset($form['account']['roles']);
  unset($form['privatemsg']);
  unset($form['status']);
  unset($form['roles']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrccties_core_form_og_ui_confirm_subscribe_alter(&$form, &$form_state, $form_id) {
  global $user;
  $account = user_load($user->uid);
  $form['field_title'][LANGUAGE_NONE]['#suffix'] = '<div class="realname">' . $account->realname . '</div>';
}

/**
 * Implements hook_og_features_default_roles_alter().
 */
function jrccties_core_og_features_default_roles_alter(&$roles) {
  if (!empty($roles['node:community:community_manager'])) {
    unset($roles['node:community:community_manager']);
  }
}

/**
 * Implements hook_og_features_default_permissions_alter().
 */
function jrccties_core_og_features_default_permissions_alter(&$permissions) {
  // Event content type's permissions.
  foreach ($permissions as $permission => $value) {
    unset($permissions[$permission]['roles']['community_manager']);
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function jrccties_core_strongarm_alter(&$items) {
  // Community content type.
  if (!empty($items['comment_community'])) {
    $items['comment_community']->value = 1;
  }
  if (!empty($items['language_content_type_community'])) {
    $items['language_content_type_community']->value = 0;
  }
  if (!empty($items['workbench_moderation_default_state_community'])) {
    $items['workbench_moderation_default_state_community']->value = 'published';
  }
  if (!empty($items['node_options_community'])) {
    $items['node_options_community']->value = array(
      0 => 'revision',
      1 => 'status',
    );
  }

  // Event content type.
  if (!empty($items['language_content_type_event'])) {
    $items['language_content_type_event']->value = 0;
  }
  if (!empty($items['workbench_moderation_default_state_event'])) {
    $items['workbench_moderation_default_state_event']->value = 'published';
  }
  if (!empty($items['node_options_event'])) {
    $items['node_options_event']->value = array(
      0 => 'revision',
      1 => 'status',
    );
  }
  if (!empty($items['field_bundle_settings_node__event'])) {
    $items['field_bundle_settings_node__event']->value = array(
      'view_modes' => array(),
      'extra_fields' => array(
        'form' => array(
          'title' => array(
            'weight' => '-10',
          ),
          'path' => array(
            'weight' => '13',
          ),
        ),
        'display' => array(),
      ),
    );
  }
}

/**
 * Implements hook_file_default_displays_alter().
 */
function jrccties_core_file_default_displays_alter(&$file_displays) {
  // Video default file display.
  if (!empty($file_displays['video__default__media_dailymotion_video'])) {
    $file_displays['video__default__media_dailymotion_video']->status = FALSE;
  }
  if (!empty($file_displays['video__default__media_avportal_video'])) {
    $file_displays['video__default__media_avportal_video']->status = FALSE;
  }
  // Video teaser file display.
  if (!empty($file_displays['video__teaser__media_avportal_image'])) {
    $file_displays['video__teaser__media_avportal_image']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__media_dailymotion_image'])) {
    $file_displays['video__teaser__media_dailymotion_image']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__file_field_media_large_icon'])) {
    $file_displays['video__teaser__file_field_media_large_icon']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__media_vimeo_image'])) {
    $file_displays['video__teaser__media_vimeo_image']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__media_youtube_image'])) {
    $file_displays['video__teaser__media_youtube_image']->status = FALSE;
  }
}

/**
 * Implements hook_node_info_alter().
 */
function jrccties_core_node_info_alter(&$node) {
  if (!empty($node['article'])) {
    unset($node['article']);
  }
}

/**
 * Implements hook_field_default_field_instances_alter().
 */
function jrccties_core_field_default_field_instances_alter(&$fields) {
  // Community content type.
  if (!empty($fields['node-community-body'])) {
    $fields['node-community-body']['widget']['weight'] = 8;
  }
  if (!empty($fields['node-community-field_thumbnail'])) {
    $fields['node-community-field_thumbnail']['widget']['weight'] = 8;
  }
  if (!empty($fields['node-community-group_access'])) {
    $fields['node-community-group_access']['display']['default']['type'] = 'hidden';
  }
  if (!empty($fields['node-community-field_tags'])) {
    $fields['node-community-field_tags']['display']['default']['type'] = 'hidden';
  }
  // Event content type.
  if (!empty($fields['node-event-field_resource'])) {
    $fields['node-event-field_resource']['display']['default']['type'] = 'hidden';
  }
  if (!empty($fields['node-event-field_tags'])) {
    unset($fields['node-event-field_tags']);
  }
  if (!empty($fields['node-event-field_location'])) {
    unset($fields['node-event-field_location']);
  }
  if (!empty($fields['node-event-body'])) {
    $fields['node-event-body']['widget']['weight'] = 1;
  }
  if (!empty($fields['node-event-field_event_date'])) {
    $fields['node-event-field_event_date']['widget']['weight'] = 3;
  }
  if (!empty($fields['node-event-field_location'])) {
    $fields['node-event-field_location']['widget']['weight'] = 5;
  }
}

/**
 * Implements hook_field_group_info_alter().
 */
function jrccties_core_field_group_info_alter(&$groups) {
  // Community content type.
  if (!empty($groups['group_community_content|node|community|form'])) {
    $groups['group_community_content|node|community|form']->data['weight'] = 0;
    $groups['group_community_content|node|community|form']->data['children'] = array(
      0 => 'title',
      1 => 'field_show_body',
      2 => 'body',
      3 => 'field_show_welcome_message',
      4 => 'field_welcome_message_title',
      5 => 'field_welcome_message_body',
      6 => 'field_about_page',
      7 => 'field_show_latest_block_homepage',
      8 => 'field_do_not_show_jrc_members',
      9 => 'field_show_subscription_buttons',
      10 => 'field_show_manager_editor_block',
      11 => 'field_show_latest_member_block',
      12 => 'field_show_last_online_members',
    );
  }
  if (!empty($groups['group_community_metadata|node|community|form'])) {
    unset($groups['group_community_metadata|node|community|form']);
  }
  if (!empty($groups['group_community_community|node|community|form'])) {
    $groups['group_community_community|node|community|form']->data['weight'] = 2;
    $groups['group_community_community|node|community|form']->data['children'] = array(
      0 => 'field_group_category',
      1 => 'og_menu',
      2 => 'group_group',
      3 => 'group_access',
      4 => 'og_roles_permissions',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrccties_core_form_node_form_alter(&$form, &$form_state, $form_id) {
  // For all content types.
  // Add a JS for users who leaves their edit page without saving.
  $form['#attributes']['class'][] = 'js-confirm-pop-up';
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'jrccties_core') . '/js/js_confirm_pop_up.js',
  );

  // Show the field_select_expertise only when it's not empty.
  if (isset($form['field_select_expertise'][LANGUAGE_NONE]['#options'])) {
    $form['field_select_expertise']['#access'] = TRUE;
    // Except it has only one "_none" value in it.
    if (isset($form['field_select_expertise'][LANGUAGE_NONE]['#options']['_none']) &&
      count($form['field_select_expertise'][LANGUAGE_NONE]['#options']) == 1) {
      $form['field_select_expertise']['#access'] = FALSE;
    }
  }

  /* Hide the field_resource as it's useless and confusing for our users. */
  $form['field_resource']['#access'] = FALSE;
  /* Hide the revision_information field as it's also useless in our case. */
  $form['revision_information']['#access'] = FALSE;
  /* Change the name of the submit button for all content types. */
  $form['actions']['submit']['#value'] = t('Save and publish');

  // For community content type.
  // Define the settings tab that show the fields to base notifications on.
  if ($form['type']['#value'] == 'community') {
    $gid = $form['nid']['#value'];
    $related_og_membership = variable_get('og_membership_type_' . $gid);
    $og_membership_fields = field_info_instances('og_membership', $related_og_membership);

    // Create fieldset in entityform.
    $form['jrccties_core'] = array(
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#title' => t('Notification fields'),
      '#weight' => 150,
      '#description' => t('In this section, you can enable the notifications for community users matching a certain tag. In order to do that, you need to choose the field where the related list of tags are available.'),
      '#tree' => TRUE,
    );

    $fields = array();
    foreach ($og_membership_fields as $key => $og_membership_field) {
      $og_membership_field_info = field_info_field($og_membership_field['field_name']);
      if ($og_membership_field_info['type'] == 'taxonomy_term_reference') {
        $fields[$key] = !empty($og_membership_field['field_name']) ? $og_membership_field['field_name'] . "=>" . $og_membership_field['label'] : '';
      }
    }

    $form['jrccties_core']['additional_settings'] = array(
      '#type' => 'checkboxes',
      '#options' => $fields,
      '#default_value' => variable_get('jrccties_core_additional_settings_' . $gid),
      '#title' => t('Fields content'),
    );

    $form['#submit'][] = '_jrccties_core_save_community_notifications_field';
  }
}

/**
 * Save eform field options for search in system variables for og.
 */
function _jrccties_core_save_community_notifications_field($form, &$form_state) {
  // First, we get the GID.
  $gid = $form['nid']['#value'];
  // We save the notification fields inside a dedicated group variable.
  variable_set('jrccties_core_additional_settings_' . $gid, $form_state['values']['jrccties_core']['additional_settings']);
}

/**
 * Implements hook_flag_notify_message_alter().
 */
function jrccties_core_flag_notify_message_alter(&$break, &$event, &$group, &$node, &$comment, &$user, &$tuser, &$notification_type, &$message_subject, &$message_body) {
  $user_wrapper = entity_metadata_wrapper('user', $user);
  $fname = $user_wrapper->field_firstname->value();
  $tuser_name = $fname;
  return $tuser_name;
}

/**
 * Custom rules action to return users experts based on given taxonomy terms.
 */
function _jrccties_core_action_skill_search($form) {
  $user_list = array();

  // Get the chosen taxonomy terms.
  foreach ($form->field_select_expertise[LANGUAGE_NONE] as $value) {
    $selectedExpertises_ids[] = $value['target_id'];
  }
  $selectedExpertises = taxonomy_term_load_multiple($selectedExpertises_ids);

  // Get the group notification fields.
  $gid = $form->og_group_ref[LANGUAGE_NONE]['0']['target_id'];
  $selectedfields = variable_get('jrccties_core_additional_settings_' . $gid);
  $selectedfields = array_filter(array_values($selectedfields));
  if (empty($selectedExpertises) || empty($selectedfields)) {
    return FALSE;
  }

  // Create the sql that gives us the list of User IDs to be notified.
  $query = db_select('og_membership', 'ogm')
    ->fields('ogm', array('etid'));
  $dbase_or = db_or();
  foreach ($selectedfields as $selectedfield) {
    $query->leftJoin('field_data_' . $selectedfield, $selectedfield, 'ogm.id = ' . $selectedfield . '.entity_id');
    foreach ($selectedExpertises as $selectedExpertise) {
      $dbase_or->condition($selectedfield . '_tid', $selectedExpertise->tid, '=');
    }
  }
  $query->condition($dbase_or);
  $query->distinct();
  $user_ids = $query->execute()->fetchAll();

  // Get the user mail from their ID.
  foreach ($user_ids as $user_id) {
    $user_list[] = user_load($user_id->etid);
  }

  if (empty($user_list)) {
    drupal_set_message(t("Sorry, we couldn't notify any user as we didn't find any user matching the chosen skill sets."));
    return FALSE;
  }
  else {
    drupal_set_message(t('An email has been sent to the users matching the chosen skill sets.'));
    return array(
      'user_list' => $user_list,
    );
  }
}

/**
 * Implements hook_multisite_drupal_toolbox_filter_options_alter().
 */
function jrccties_core_multisite_drupal_toolbox_filter_options_alter(&$filter_options) {
  // Enable the <object> tag, strongly not advised of course.
  $filter_options['valid_elements']['iframe'] = array('*' => TRUE);
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function jrccties_core_og_context_negotiation_info() {
  $providers = array();

  $providers['jrccties_communities'] = array(
    'name' => t('Jrccties Communities'),
    'description' => t("Select group context for any url that start with 'community'"),
    'callback' => 'jrccties_core_context_handler',
    'menu path' => array('community/%'),
  );

  $providers['jrccties_ajax_request'] = array(
    'name' => t('JRCcties ajax request'),
    'description' => t("Handling Ajax requests"),
    'callback' => 'jrccties_core_handler_ajax_request',
  );

  return $providers;
}

/**
 * Context handler. Get groups from the page that initiated an Ajax request.
 *
 * Works with:
 * Media widget - requests starting with: media/ajax.
 * Image widget - requests starting with: file/ajax.
 * Add more button - requests starting with: system/ajax.
 *
 * @return array
 *   The structured og context handler data.
 */
function jrccties_core_handler_ajax_request() {
  static $ajax_pattern = "/^(system|file|media)\/ajax.*$/";

  // Execute only on node/add pages when doing ajax calls.
  if (strpos($_SERVER['HTTP_REFERER'], 'node/add') !== FALSE && preg_match($ajax_pattern, current_path())) {
    if (!empty($_SESSION['og_context']['group_type']) && !empty($_SESSION['og_context']['gid'])) {
      return array(
        $_SESSION['og_context']['group_type'] => array($_SESSION['og_context']['gid']),
      );
    }

    $url = drupal_parse_url($_SERVER['HTTP_REFERER']);
    return array(
      'node' => array($url['query']['og_group_ref']),
    );
  }
}

/**
 * Context handler; Get groups from events.
 *
 * @return array
 *   OG context
 */
function jrccties_core_context_handler() {
  global $language;

  $keyword = 'community';

  // Remove langcode on URL according the language negotiation type used.
  if (language_negotiation_get_any('nexteuropa_multilingual_url_suffix')) {
    $path = nexteuropa_multilingual_language_negotiation_split_suffix(request_path(), array($language));
  }
  elseif (defined('MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX') && language_negotiation_get_any(MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX)) {
    $path = language_url_split_suffix(request_path(), array($language));
  }
  elseif (language_negotiation_get_any(LOCALE_LANGUAGE_NEGOTIATION_URL)) {
    $path = language_url_split_prefix(request_path(), array($language));
  }
  else {
    $path = array(FALSE, request_path());
  }

  $path_args = explode('/', $path[1]);

  // Look for the community keyword in the path.
  if ($path_args[0] === $keyword) {

    if (isset($path_args[1]) && is_numeric($path_args[1])) {
      // Check that the node acts as a group.
      $node = node_load($path_args[1]);

      if (og_is_group('node', $node)) {
        return array(
          'node' => array(
            $node->nid,
          ),
        );
      }
    }
  }
  return array();
}

/**
 * Implements hook_url_outbound_alter().
 */
function jrccties_core_url_outbound_alter(&$path, &$options, $original_path) {
  // Always make login links go back to the current page.
  switch ($path) {
    case 'ecas':
      if (current_path() != 'ecas' && current_path() != 'user/login') {
        $options['query']['destination'] = current_path();
      }
      break;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function jrccties_core_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'node_update') {
    unset($implementations['communities']);
  }
}

/**
 * Implements hook_admin_paths().
 */
function jrccties_core_admin_paths() {
  $paths = array(
    'community/*/content' => TRUE,
    'community/*/articles' => TRUE,
    'community/*/events' => TRUE,
    'community/*/past-events' => TRUE,
    'community/*/upcoming-events' => TRUE,
    'community/*/news' => TRUE,
    'community/*/forum' => TRUE,
    'community/*/files' => TRUE,
    'community/*/comments' => TRUE,
    'community/*/polls' => TRUE,
    'community/*/library/documents' => TRUE,
    'community/*/library/audios' => TRUE,
    'community/*/library/photos' => TRUE,
    'community/*/library/videos' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_permission().
 */
function jrccties_core_permission() {
  return array(
    'change newsletter subscription' => array(
      'title' => t('Change newsletter subscription'),
      'description' => t('Change newsletter subscription'),
    ),
    'administer newsletter settings' => array(
      'title' => t('Administer newsletter settings'),
      'description' => t('Administer newsletter settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function jrccties_core_menu() {
  $items['admin/linkchecker/csvexport'] = array(
    'title' => 'Linkchecker',
    'page callback' => 'jrccties_core_linchecker_csv_export',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['newsletter'] = array(
    'title' => 'Newsletter subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jrccties_core_newsletter_subscription_form'),
    'access arguments' => array('change newsletter subscription'),
  );

  $items['admin/newsletter-settings'] = array(
    'title' => 'Newsletter settings',
    'description' => 'Newsletter settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jrccties_newsletter_settings_form'),
    'access arguments' => array('administer newsletter settings'),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function jrccties_core_newsletter_subscription_form($form, &$form_state) {
  global $user;
  $newsletter_communities = _jrccties_core_get_newsletter_communities();
  $query = db_select('og_membership', 'ogm')
    ->fields('ogm', array('gid', 'id'));
  $query->innerJoin('node', 'n', 'n.nid = ogm.gid');
  $query->addField('n', 'title');
  $query->condition('ogm.etid', $user->uid)
    ->condition('ogm.entity_type', 'user')
    ->condition('ogm.type', $newsletter_communities, 'IN');
  $results = $query->execute()->fetchAll();

  $options = array();
  foreach ($results as $result) {
    $options[$result->id] = $result->title;
  }

  $query_default_values = db_select('field_data_field_newsletter_subscribe', 'fdfns')
    ->fields('fdfns', array('entity_id'))
    ->condition('fdfns.entity_id', array_keys($options), 'IN')
    ->condition('fdfns.field_newsletter_subscribe_value', 1)
    ->execute()->fetchCol(0);

  $form['newsletter_subscription'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $query_default_values,
    '#title' => t('For which communities do you want to receive latest content?'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Click Here!'),
  );
  $form['#redirect'] = FALSE;
  return $form;
}

/**
 * Implements hook_form().
 */
function jrccties_core_newsletter_subscription_form_submit($form, &$form_state) {
  $results = $form_state['values']['newsletter_subscription'];
  foreach ($results as $key => $value) {
    $membership = og_membership_load($key);
    if ($value != 0) {
      $value = 1;
    }
    $membership->field_newsletter_subscribe[LANGUAGE_NONE][0]['value'] = $value;
    og_membership_save($membership);
  }
}

/**
 * Generates Linkchecker CSV.
 */
function jrccties_core_linchecker_csv_export() {

  // Using db_query is the preferred way here, for easier maintenance.
  $sql = "
      SELECT
        ll.lid AS LinkcheckerID,
        n2.nid AS CommunityID,
        n2.title AS CommunityTitle,
        n.nid AS NodeID,
        n.vid as RevisionID,
        CONCAT('https://ec.europa.eu/jrc/communities/en/node/',ln.nid ) AS Page,
        ll.url AS BrokenLink,
        ll.code AS ErrorCode,
        ll.error AS ErrorMessage,
        ll.fail_count AS FailCount,
        from_unixtime(ll.last_checked) AS LastCheckedDate,
        u.uid AS UserID,
        r.realname AS UserName,
        u.mail AS UserMail,
        fc.field_creator_value AS Unit
      FROM linkchecker_link AS ll
             INNER JOIN linkchecker_node AS ln ON ll.lid = ln.lid
             INNER JOIN node AS n ON ln.nid = n.nid
             INNER JOIN node_revision AS nr ON n.nid = nr.nid
             INNER JOIN users AS u ON nr.uid = u.uid
             INNER JOIN field_data_field_creator AS fc ON u.uid = fc.entity_id
             INNER JOIN realname AS r ON u.uid = r.uid
             INNER JOIN og_membership as ogm on n.nid = ogm.etid
             INNER JOIN node as n2 on n2.nid = ogm.gid
      WHERE n.vid = nr.vid
      AND ogm.entity_type = 'node'";

  $results = db_query($sql)->fetchAll();

  if ($results) {
    // Adds necessary headers for browsers.
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = linkchecker.csv');

    // Instead of writing down to a file we write to the output stream.
    $fh = fopen('php://output', 'w');

    // Since fetchAll() returns an array of StdObjects, this line is
    // generating the headers, from the QueryKeys, so if the query is updated,
    // the other structures will be generated automatically.
    $header_values = array_keys(get_object_vars(reset($results)));

    // Generate headers.
    fputcsv($fh, $header_values);

    // Write data in the CSV format.
    foreach ($results as $result) {
      fputcsv($fh, get_object_vars($result));
    }
    fclose($fh);
  }

}
