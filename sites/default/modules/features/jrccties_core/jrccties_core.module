<?php

/**
 * @file
 * Code for the jrccties_core feature.
 */

define('JRCCTIES_CORE_OG_ENTITYFORM_AUDIENCE_FIELD', 'og_group_ref');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrccties_core_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  unset($form['contact']);
  unset($form['#metatags']);
  unset($form['redirect']);
  unset($form['account']['status']);
  unset($form['account']['roles']);
  unset($form['privatemsg']);
  unset($form['status']);
  unset($form['roles']);
}

/**
 * Implements hook_og_features_default_roles_alter().
 */
function jrccties_core_og_features_default_roles_alter(&$roles) {
  if (!empty($roles['node:community:community_manager'])) {
    unset($roles['node:community:community_manager']);
  }
}

/**
 * Implements hook_og_features_default_permissions_alter().
 */
function jrccties_core_og_features_default_permissions_alter(&$permissions) {
  // Event content type's permissions.
  foreach ($permissions as $permission => $value) {
    unset($permissions[$permission]['roles']['community_manager']);
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function jrccties_core_strongarm_alter(&$items) {
  // Community content type.
  if (!empty($items['comment_community'])) {
    $items['comment_community']->value = 1;
  }
  if (!empty($items['language_content_type_community'])) {
    $items['language_content_type_community']->value = 0;
  }
  if (!empty($items['workbench_moderation_default_state_community'])) {
    $items['workbench_moderation_default_state_community']->value = 'published';
  }
  if (!empty($items['node_options_community'])) {
    $items['node_options_community']->value = array(
      0 => 'revision',
      1 => 'status',
    );
  }

  // Event content type.
  if (!empty($items['language_content_type_event'])) {
    $items['language_content_type_event']->value = 0;
  }
  if (!empty($items['workbench_moderation_default_state_event'])) {
    $items['workbench_moderation_default_state_event']->value = 'published';
  }
  if (!empty($items['node_options_event'])) {
    $items['node_options_event']->value = array(
      0 => 'revision',
      1 => 'status',
    );
  }
  if (!empty($items['field_bundle_settings_node__event'])) {
    $items['field_bundle_settings_node__event']->value = array(
      'view_modes' => array(),
      'extra_fields' => array(
        'form' => array(
          'title' => array(
            'weight' => '-10',
          ),
          'path' => array(
            'weight' => '13',
          ),
        ),
        'display' => array(),
      ),
    );
  }
}

/**
 * Implements hook_file_default_displays_alter().
 */
function jrccties_core_file_default_displays_alter(&$file_displays) {
  // Video default file display.
  if (!empty($file_displays['video__default__media_dailymotion_video'])) {
    $file_displays['video__default__media_dailymotion_video']->status = FALSE;
  }
  if (!empty($file_displays['video__default__media_avportal_video'])) {
    $file_displays['video__default__media_avportal_video']->status = FALSE;
  }
  // Video teaser file display.
  if (!empty($file_displays['video__teaser__media_avportal_image'])) {
    $file_displays['video__teaser__media_avportal_image']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__media_dailymotion_image'])) {
    $file_displays['video__teaser__media_dailymotion_image']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__file_field_media_large_icon'])) {
    $file_displays['video__teaser__file_field_media_large_icon']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__media_vimeo_image'])) {
    $file_displays['video__teaser__media_vimeo_image']->status = FALSE;
  }
  if (!empty($file_displays['video__teaser__media_youtube_image'])) {
    $file_displays['video__teaser__media_youtube_image']->status = FALSE;
  }
}

/**
 * Implements hook_node_info_alter().
 */
function jrccties_core_node_info_alter(&$node) {
  if (!empty($node['article'])) {
    unset($node['article']);
  }
}

/**
 * Implements hook_field_default_field_instances_alter().
 */
function jrccties_core_field_default_field_instances_alter(&$fields) {
  // Community content type.
  if (!empty($fields['node-community-body'])) {
    $fields['node-community-body']['widget']['weight'] = 8;
  }
  if (!empty($fields['node-community-field_thumbnail'])) {
    $fields['node-community-field_thumbnail']['widget']['weight'] = 8;
  }
  if (!empty($fields['node-community-group_access'])) {
    $fields['node-community-group_access']['display']['default']['type'] = 'hidden';
  }
  if (!empty($fields['node-community-field_tags'])) {
    $fields['node-community-field_tags']['display']['default']['type'] = 'hidden';
  }
  // Event content type.
  if (!empty($fields['node-event-field_resource'])) {
    $fields['node-event-field_resource']['display']['default']['type'] = 'hidden';
  }
  if (!empty($fields['node-event-field_tags'])) {
    unset($fields['node-event-field_tags']);
  }
  if (!empty($fields['node-event-field_location'])) {
    unset($fields['node-event-field_location']);
  }
  if (!empty($fields['node-event-body'])) {
    $fields['node-event-body']['widget']['weight'] = 1;
  }
  if (!empty($fields['node-event-field_event_date'])) {
    $fields['node-event-field_event_date']['widget']['weight'] = 3;
  }
  if (!empty($fields['node-event-field_location'])) {
    $fields['node-event-field_location']['widget']['weight'] = 5;
  }
}

/**
 * Implements hook_field_group_info_alter().
 */
function jrccties_core_field_group_info_alter(&$groups) {
  // Community content type.
  if (!empty($groups['group_community_content|node|community|form'])) {
    $groups['group_community_content|node|community|form']->data['weight'] = 0;
    $groups['group_community_content|node|community|form']->data['children'] = array(
      0 => 'title',
      1 => 'field_show_body',
      2 => 'body',
      3 => 'field_show_welcome_message',
      4 => 'field_welcome_message_title',
      5 => 'field_welcome_message_body',
      6 => 'field_about_page',
      7 => 'field_show_latest_block_homepage',
      8 => 'field_do_not_show_jrc_members',
      9 => 'field_show_subscription_buttons',
      10 => 'field_show_manager_editor_block',
      11 => 'field_show_latest_member_block',
      12 => 'field_show_last_online_members',
    );
  }
  if (!empty($groups['group_community_metadata|node|community|form'])) {
    unset($groups['group_community_metadata|node|community|form']);
  }
  if (!empty($groups['group_community_community|node|community|form'])) {
    $groups['group_community_community|node|community|form']->data['weight'] = 2;
    $groups['group_community_community|node|community|form']->data['children'] = array(
      0 => 'field_group_category',
      1 => 'og_menu',
      2 => 'group_group',
      3 => 'group_access',
      4 => 'og_roles_permissions',
    );
  }
}

/**
 * Custom switch for submit handler. First fill the questionair.
 */
function jrccties_core_form_entityform_edit_form_alter(&$form, &$form_state) {
  global $user;
  $menu = menu_get_item();
  // Get URL alias as set from the entityform submit.
  if (!empty($menu['page_arguments'][0]->paths['submit']['alias'])) {
    $alias = $menu['page_arguments'][0]->paths['submit']['alias'];
    // Extract group id from path.
    $find_gid_number = '/([\d]+)/m';
    preg_match_all($find_gid_number, $alias, $match);
  }
  if (!empty($menu['page_arguments'][0]->data['redirect_path'])) {
    $redirect_path = $menu['page_arguments'][0]->data['redirect_path'];
  }

  if (isset($match)) {
    $gid = (int) $match['0']['0'];
    if (og_is_member('node', $gid, 'user', $user, array(OG_STATE_PENDING))) {
      // Hide entityform draft update button.
      $form['actions']['save']['#access'] = FALSE;
      // Hide entityform submit button.
      $form['actions']['submit']['#access'] = FALSE;
      drupal_set_message(t("Your membership is pending. Please wait for approval"), "warning");
      return;
    }
    if (og_is_member('node', $gid, 'user', $user, array(OG_STATE_ACTIVE))) {
      $form['actions']['submit']['#access'] = FALSE;
    }
    else {
      $form['actions']['save']['#access'] = FALSE;
    }
    // Prepopulate organic groups reference field with audience.
    $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'] = $gid;
    // Stash the groupId and redirect path in $form array for submit handler.
    $form['#stash_gid'] = $gid;
    $form['#redirect_path'] = empty($redirect_path) ? 'node/' . $match[0] : $redirect_path;
  }
  $form['actions']['submit']['#submit'] = array(
    'entityform_edit_form_submit',
    '_jrccties_core_entityform_edit_form_submit',
  );
}

/**
 * Join organic group programmatically from provided entityform.
 */
function _jrccties_core_entityform_edit_form_submit(&$form, &$form_state) {
  // Get Group ID stashed in form.
  $groupid = $form['#stash_gid'];
  $values = array(
    'entity_type' => 'user',
    'entity' => FALSE,
    'field_name' => FALSE,
    'state' => 1,
  );
  $values['state'] = 2;

  // The form was generated with entityform, save a record on DB to check.
  $transaction = db_transaction();

  try {
    // Join organic group programmatically.
    og_group('node', $groupid, $values);
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('To track entityform DB', $e);
  }

  drupal_goto($form['#redirect_path']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrccties_core_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Add a JS for users who leaves their edit page without saving.
  $form['#attributes']['class'][] = 'js-confirm-pop-up';
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'jrc_sh_core') . '/js/js_confirm_pop_up.js',
  );

  // Show the field_select_expertise only when it's not empty.
  if (isset($form['field_select_expertise'][LANGUAGE_NONE]['#options'])) {
    $form['field_select_expertise']['#access'] = TRUE;
    // Except it has only one "_none" value in it.
    if (isset($form['field_select_expertise'][LANGUAGE_NONE]['#options']['_none']) &&
      count($form['field_select_expertise'][LANGUAGE_NONE]['#options']) == 1) {
      $form['field_select_expertise']['#access'] = FALSE;
    }
  }

  /* Hide the field_resource as it's useless and confusing for our users. */
  $form['field_resource']['#access'] = FALSE;
  /* Hide the revision_information field as it's also useless in our case. */
  $form['revision_information']['#access'] = FALSE;
  /* Change the name of the submit button for all content types. */
  $form['actions']['submit']['#value'] = t('Save and publish');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * When an admin try to unsubcribe a user manually
 * from the subscription entityforms.
 */
function jrccties_core_form_og_ui_delete_membership_alter(&$form, &$form_state, $form_id) {
  $form['#submit'] = array(
    'jrccties_core_form_og_ui_delete_membership_submit',
    'og_ui_delete_membership_submit',
  );
}

/**
 * Remove user from Entityform when admin unsubscribe him from the group.
 */
function jrccties_core_form_og_ui_delete_membership_submit(&$form, &$form_state) {
  // First get the groupd id from url.
  $path = drupal_get_path_alias();
  $path = explode('/', $path);
  $gid = $path[2];
  $og_memebership_id = $path[6];

  // Then we get the Type of the entityform via the groupd id.
  $entityform_type = _jrccties_core_get_entityform_type_from_group($gid);

  // Then we search for the actual user sumbmission.
  $query = db_select('entityform', 'ef')
    ->fields('ef', array('entityform_id'));
  $query->join('og_membership', 'om', 'om.etid = ef.uid');
  $query->condition('ef.type', $entityform_type->type, '=');
  $query->condition('om.id', $og_memebership_id, '=');
  $entityform_id = $query->execute()->fetch();

  // If we find one, we erase it.
  if (!empty($entityform_id)) {
    db_delete('entityform')
      ->condition('entityform_id', $entityform_id->entityform_id, '=')
      ->execute();
  }
}

/**
 * Get entityform type from a group.
 *
 * @param string $gid
 *   The group id.
 *
 * @return string
 *   The entityform type
 */
function _jrccties_core_get_entityform_type_from_group($gid) {
  $query = db_select('entityform_type', 'et')
    ->fields('et', array('type'));
  $query->join('field_data_field_og_related_entityform', 'ore', 'ore.field_og_related_entityform_target_id = et.id');
  $query->condition('ore.entity_id', $gid, '=');
  $entityform_type = $query->execute()->fetch();
  return $entityform_type;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a function to delete the entityform submissions from DB,
 * when unsubscribing from the community subscription entityforms.
 */
function jrccties_core_form_og_ui_confirm_unsubscribe_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'jrccties_core_form_og_ui_confirm_unsubscribe_submit';
}

/**
 * Remove actual user from Entityform when unsubscribing the group.
 */
function jrccties_core_form_og_ui_confirm_unsubscribe_submit(&$form, &$form_state) {
  global $user;
  // First we get the ID of the entityform.
  $related_og_entityform_id = $form['group']['#value']->field_og_related_entityform[LANGUAGE_NONE][0]['target_id'];
  // Then we search the actual user sumbmission
  // inside the given entityform.
  if ($related_og_entityform_id != NULL) {
    $query = db_select('entityform', 'ef')
      ->fields('ef', array('entityform_id'));
    $query->join('entityform_type', 'et', 'ef.type = et.type');
    $query->condition('ef.uid', $user->uid, '=');
    $query->condition('et.id', $related_og_entityform_id, '=');
    $entityform_id = $query->execute()->fetch();
    // If we find one, we erase it.
    if (!empty($entityform_id)) {
      db_delete('entityform')
        ->condition('entityform_id', $entityform_id->entityform_id, '=')
        ->execute();
    }
  }
}

/**
 * Implements hook_flag_notify_message_alter().
 */
function jrccties_core_flag_notify_message_alter(&$break, &$event, &$group, &$node, &$comment, &$user, &$tuser, &$notification_type, &$message_subject, &$message_body) {
  $user_wrapper = entity_metadata_wrapper('user', $user);
  $fname = $user_wrapper->field_firstname->value();
  $tuser_name = $fname;
  return $tuser_name;
}

/**
 * Get users from organic group id to map fields from user profile into eform.
 */
function _jrccties_core_get_users_in_group($gid) {
  // Alumni's Group ID is number '2'.
  $query = db_select('users', 'u');
  $query->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => '2'));
  $result = $query->execute();

  return $result->fetchAll();
}

/**
 * Get users to notify.
 */
function _jrccties_core_get_users($node) {
  $user_to_notify = $node->field_notify_users[LANGUAGE_NONE];
  $users = array();

  foreach ($user_to_notify as $key => $values) {
    $users[$key] = $values['target_id'];
  }

  $people = array_values($users);
  $user_to_notify = user_load_multiple($people);

  return $user_to_notify;
}

/**
 * Update users to notify.
 */
function _jrccties_core_update_users() {
  $item = menu_get_item();
  if (!isset($item['page_arguments'][1])) {
    return;
  }

  $user_to_notify = $item['page_arguments'][1]->field_notify_users[LANGUAGE_NONE];
  $users = array();

  foreach ($user_to_notify as $key => $values) {
    $users[$key] = $values['target_id'];
  }

  $people = array_values($users);
  $user_to_notify = user_load_multiple($people);

  return $user_to_notify;
}

/**
 * Get expertise terms for notifications.
 */
function _jrccties_core_get_options($node) {
  $tags = array();

  $selectedExpertise = isset($node->field_select_expertise[LANGUAGE_NONE]) ? $node->field_select_expertise[LANGUAGE_NONE] : FALSE;

  if (is_array($selectedExpertise)) {
    foreach ($selectedExpertise as $key => $value) {
      $tags[$key] = $value['target_id'];
    }
  }
  $terms = array_values($tags);
  $terms = taxonomy_term_load_multiple($terms);

  return $terms;
}

/**
 * Update skills to search for notifications.
 */
function _jrccties_core_update_options() {
  $item = menu_get_item();
  if (!isset($item['page_arguments'][1])) {
    return;
  }
  $selectedExpertise = isset($item['page_arguments'][1]->field_select_expertise[LANGUAGE_NONE]) ? $item['page_arguments'][1]->field_select_expertise[LANGUAGE_NONE] : FALSE;

  $tags = array();

  if (is_array($selectedExpertise)) {
    foreach ($selectedExpertise as $key => $value) {
      $tags[$key] = $value['target_id'];
    }
  }
  $terms = array_values($tags);
  $terms = taxonomy_term_load_multiple($terms);
  return $terms;
}

/**
 * Custom rules action to return users experts in certain taxonomy terms.
 */
function _jrccties_core_action_skill_search($eform) {
  $user_list = array();

  $selectedExpertises = _jrccties_core_update_options();
  if (empty($selectedExpertises)) {
    $selectedExpertises = _jrccties_core_get_options($eform);
  }
  $gid = $eform->og_group_ref[LANGUAGE_NONE]['0']['target_id'];
  $selectedfields = variable_get('jrccties_core_additional_settings_' . $gid, array());
  $selectedfields = array_filter(array_values($selectedfields));
  if (empty($selectedExpertises) || empty($selectedfields)) {
    return FALSE;
  }

  $query = db_select('entityform', 'e')
    ->fields('e', array('entityform_id'));
  $dbase_or = db_or();

  foreach ($selectedfields as $selectedfield) {
    $query->leftJoin('field_data_' . $selectedfield, $selectedfield, 'e.entityform_id = ' . $selectedfield . '.entity_id');
    $query->condition($dbase_or);
    foreach ($selectedExpertises as $selectedExpertise) {
      $dbase_or->condition($selectedfield . '_tid', $selectedExpertise->tid, '=');
    }
  }
  $query->distinct();
  $result = $query->execute()->fetchAll();
  $user_list = _jrccties_core_get_user_from_eform($result);

  return array(
    'user_list' => $user_list,
  );
}

/**
 * Get user from entityform and return user account to custom rules action.
 */
function _jrccties_core_get_user_from_eform($result) {
  $submissionArray = array();
  foreach ($result as $key => $entityform_ids) {
    $eform_id = $entityform_ids->entityform_id;
    $submissionArray[$key] = entity_load('entityform', array($eform_id));
  }

  // Get email addresses from Users table based on Entityform UID.
  $user_list = array();
  foreach ($submissionArray as $submission) {
    foreach ($submission as $key => $person) {
      $user_list[$key] = user_load($person->uid);
    }
  }
  if (empty($user_list)) {
    drupal_set_message(t('No matchings skills were found in your userbase'));
  }
  else {
    drupal_set_message(t('Emails have been sent to your userbase matching your provided skillset'));
  }

  return $user_list;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jrccties_core_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  $entityform_type = $form['#entityform_type']->type;
  $fields_info = field_info_instances('entityform', $entityform_type);

  // Create fieldset in entityform.
  $form['jrccties_core'] = array(
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => t('Notification fields'),
    '#weight' => 150,
    '#description' => t('Choose fields for skills notifications.'),
    '#tree' => TRUE,
  );

  $fields = array();
  foreach ($fields_info as $key => $infos) {
    $name = field_info_field($infos['field_name']);
    if (($name['type'] == 'taxonomy_term_reference') || ($name['type'] == 'text')) {
      $fields[$key] = !empty($infos['field_name']) ? $infos['field_name'] . "=>" . $infos['label'] : '';
    }
  }

  if (isset($form['paths']['submit']['alias']['#default_value'])) {
    $gid = explode('/', $form['paths']['submit']['alias']['#default_value']);
    $gid = $gid[2];
  }

  $form['jrccties_core']['additional_settings'] = array(
    '#type' => 'checkboxes',
    '#options' => $fields,
    '#default_value' => variable_get('jrccties_core_additional_settings_' . $gid, array()),
    '#title' => t('Fields content'),
  );

  $form['#submit'][] = '_jrccties_core_save_eform_field_options';
}

/**
 * Save eform field options for search in system variables for og.
 */
function _jrccties_core_save_eform_field_options($form, &$form_state) {
  // First we get the GID from the URI on the entityform settings.
  $gid = explode('/', $form_state['values']['paths']['submit']['alias']);
  $gid = $gid[2];
  // We save the notification fields inside a dedicated group variable.
  variable_set('jrccties_core_additional_settings_' . $gid, $form_state['values']['jrccties_core']['additional_settings']);
  return system_settings_form($form);
}

/**
 * Implements hook_og_permission().
 */
function jrccties_core_og_permission() {
  return array(
    'edit og entityform submissions' => array(
      'title' => t('Edit all entityform group submissions'),
      'description' => t("Allow user to edit the entityform submissions to the group's forms."),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Retrieve the groups an entityform is group content for.
 */
function _jrccties_core_get_groups_for_entityform($entityform) {
  $groups = array();
  $wrapper = entity_metadata_wrapper('entityform', $entityform);
  if (isset($wrapper->{JRCCTIES_CORE_OG_ENTITYFORM_AUDIENCE_FIELD})) {
    $all_groups = $wrapper->{JRCCTIES_CORE_OG_ENTITYFORM_AUDIENCE_FIELD}->value();
    if (!empty($all_groups)) {
      if (is_array($all_groups)) {
        foreach ($wrapper->{JRCCTIES_CORE_OG_ENTITYFORM_AUDIENCE_FIELD} as $group) {
          $groups[$group->type()][$group->getIdentifier()] = $group->value();
        }
      }
      elseif (is_object($all_groups)) {
        $group = $wrapper->{JRCCTIES_CORE_OG_ENTITYFORM_AUDIENCE_FIELD};
        $groups[$group->type()][$group->getIdentifier()] = $group->value();
      }
    }
  }
  return $groups;
}

/**
 * Retrieve a list of group members with a specific group-level permission.
 */
function _jrccties_core_get_members_with_permission($group_type, $gid, $perm) {
  $privileged_members = array();
  $group = entity_metadata_wrapper($group_type, $gid);
  $roles = og_roles($group->type(), $group->getBundle(), $group->getIdentifier());
  $role_permissions = og_role_permissions($roles);
  $privileged_roles = array();
  foreach ($role_permissions as $rid => $permissions) {
    if (!empty($permissions[$perm])) {
      $privileged_roles[$rid] = $rid;
    }
  }
  if (!empty($privileged_roles)) {
    // Get the group members the group content belongs to.
    $query = db_select('og_users_roles', 'our');
    $query->join('users', 'u', 'our.uid = u.uid');
    $query->join('og_membership', 'ogm', "ogm.group_type = our.group_type AND ogm.gid = ogm.gid AND ogm.entity_type = 'user' AND ogm.etid = u.uid");
    $members = $query->fields('u', array('uid'))
      ->condition('our.gid', $group->getIdentifier())
      ->condition('our.group_type', $group->type())
      ->condition('our.rid', $privileged_roles, 'IN')
      ->condition('u.status', 1)
      ->condition('ogm.state', OG_STATE_ACTIVE)
      ->execute()
      ->fetchCol();
    foreach ($members as $uid) {
      $privileged_members[$uid] = user_load($uid);
    }
  }
  return $privileged_members;
}

/**
 * Implments hook_entityform_access_alter().
 */
function jrccties_core_entityform_access_alter(&$access, $op, $context) {
  $entityform = $context['entityform'];
  if (in_array($op, array('view', 'edit', 'delete')) && empty($entityform->draft)) {
    $all_groups = _jrccties_core_get_groups_for_entityform($entityform);
    if (!empty($all_groups)) {
      foreach ($all_groups as $group_type => $groups) {
        foreach ($groups as $gid => $group) {
          if (og_user_access($group_type, $gid, "$op og entityform submissions")) {
            $access = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_multisite_drupal_toolbox_filter_options_alter().
 */
function jrccties_core_multisite_drupal_toolbox_filter_options_alter(&$filter_options) {
  // Enable the <object> tag, strongly not advised of course.
  $filter_options['valid_elements']['iframe'] = array('*' => TRUE);
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function jrccties_core_og_context_negotiation_info() {
  $providers = array();

  $providers['jrccties_communities'] = array(
    'name' => t('Jrccties Communities'),
    'description' => t("Select group context for any url that start with 'community'"),
    'callback' => 'jrccties_core_context_handler',
    'menu path' => array('community/%'),
  );

  return $providers;
}

/**
 * Context handler; Get groups from events.
 *
 * @return array
 *   OG context
 */
function jrccties_core_context_handler() {
  global $language;

  $keyword = 'community';

  // Remove langcode on URL according the language negotiation type used.
  if (language_negotiation_get_any('nexteuropa_multilingual_url_suffix')) {
    $path = nexteuropa_multilingual_language_negotiation_split_suffix(request_path(), array($language));
  }
  elseif (defined('MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX') && language_negotiation_get_any(MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX)) {
    $path = language_url_split_suffix(request_path(), array($language));
  }
  elseif (language_negotiation_get_any(LOCALE_LANGUAGE_NEGOTIATION_URL)) {
    $path = language_url_split_prefix(request_path(), array($language));
  }
  else {
    $path = array(FALSE, request_path());
  }

  $path_args = explode('/', $path[1]);

  // Look for the community keyword in the path.
  if ($path_args[0] === $keyword) {

    if (isset($path_args[1]) && is_numeric($path_args[1])) {
      // Check that the node acts as a group.
      $node = node_load($path_args[1]);

      if (og_is_group('node', $node)) {
        return array(
          'node' => array(
            $node->nid,
          ),
        );
      }
    }
  }
  return array();
}

/**
 * Implements hook_url_outbound_alter().
 */
function jrccties_core_url_outbound_alter(&$path, &$options, $original_path) {
  // Always make login links go back to the current page.
  switch ($path) {
    case 'ecas':
      $options['query']['destination'] = $_GET['q'];
      break;
  }
}
