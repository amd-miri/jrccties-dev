<?php
/**
 * @file
 * Feature set Main file.
 */

// Indicates if all the enable modules are enabled.
define('FEATURE_SET_ENABLED', 0x01);

// Indicates if all the disable modules are disabled.
define('FEATURE_SET_DISABLED', 0x02);

/*
 * @todo keep a running tally of modules in the disable list and make sure that
 *       no other feature set has that module listed in its disable list.
 */

/**
 * Implements hook_help().
 *
 * This will display the readme.txt as the help text, processed with the
 * markdown module, if installed.
 */
function feature_set_help($path, $arg) {
  switch ($path) {
    case 'admin/help#feature_set':
      $path = dirname(__FILE__) . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }

      if (!isset($readme)) {
        return NULL;
      }

      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . check_plain($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . check_plain($readme) . '</pre>';
      }
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function feature_set_permission() {
  return array(
    'administer feature sets' => array(
      'title' => t('Administer feature sets'),
      'description' => t('Enable and disable feature sets as defined by the feature set module. Note that this functionality is similar and is a subset of the functionality allowed by administer modules so be aware that users with this permission will be able to enable, disable, and uninstall modules defined via the feature set module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function feature_set_menu() {
  $items['admin/structure/feature-set'] = array(
    'title' => 'Feature Set',
    'description' => 'Enable or disable feature sets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feature_set_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer feature sets'),
    'file' => 'feature_set.admin.inc',
  );
  $items['admin/structure/feature-set/enable/%'] = array(
    'title' => 'Feature set enable',
    'description' => 'Enable a feature set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feature_set_enable_url', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer feature sets'),
    'file' => 'feature_set.admin.inc',
  );
  $items['admin/structure/feature-set/disable/%'] = array(
    'title' => 'Feature set disable',
    'description' => 'Disable a feature set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feature_set_disable_url', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer feature sets'),
    'file' => 'feature_set.admin.inc',
  );
  return $items;
}

/**
 * This will parse the information of the feature sets.
 */
function feature_set_parse_info($info, $module, $path) {
  $sets = array();
  if (!empty($info['feature_sets'])) {
    foreach ($info['feature_sets'] as $set => $details) {
      $details['module'] = $module;
      $details['status'] = feature_set_status($details);

      if (!empty($details['icon'])) {
        $details['icon'] = $path . '/' . $details['icon'];
      }

      if (!empty($details['dependencies'])) {
        $details['meta'] = TRUE;
      }
      else {
        $details['meta'] = FALSE;
      }

      // Add only valid feature sets.
      if (feature_set_check($details)) {
        $sets[$set] = $details;
      }
    }
  }
  ksort($sets);
  
  return $sets;
}

/**
 * Returns an array of defined feature_sets.
 */
function feature_set_get_featuresets($install_state = NULL) {
  $sets = &drupal_static(__FUNCTION__);

  if (!isset($sets)) {
    $modules = module_implements('feature_set_api');
    $sets = array();
    foreach ($modules as $module) {
      $path = drupal_get_path('module', $module);
      $infofile = $path . '/' . $module . '.info';
      $info = drupal_parse_info_file($infofile);
      $sets += feature_set_parse_info($info, $module, $path);
    }

    // Add feature sets from the install profile.
    if (!empty($install_state['parameters']['profile'])) {
      $install_profile = $install_state['parameters']['profile'];
    }
    else {
      $install_profile = variable_get('install_profile', '');
    }

    if (!empty($install_profile)) {
      $info = drupal_parse_info_file("profiles/$install_profile/$install_profile.info");
      $path = 'profiles/' . $install_profile;
      $sets += feature_set_parse_info($info, $install_profile, $path);
    }
  }
  return $sets;
}

/**
 * Get information for a specific feature_set.
 *
 * @param string $feature_set
 *   Name of the feature_set to retrieve information.
 *
 * @return array|FALSE
 *   Array of feature_set information or FALSE if $feature_set doesn't exist.
 */
function feature_set_get_featureset($feature_set) {
  $sets = feature_set_get_featuresets();
  if (!empty($sets[$feature_set])) {
    return $sets[$feature_set];
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to enable the feature set.
 */
function feature_set_enable_feature_set($feature_set) {
  if (!empty($feature_set['enable'])) {
    if (module_enable($feature_set['enable'])) {
      return TRUE;
    }
    else {
      foreach ($feature_set['enable'] as $module) {
        if (!drupal_get_path('module', $module)) {
          drupal_set_message(t("<b>%m</b> module could not be activated.", array('%m' => $module)), 'error');
        }
      }
      return FALSE;
    }
  }
}

/**
 * Helper function to disable the feature set.
 */
function feature_set_disable_feature_set($feature_set) {
  if (!empty($feature_set['disable'])) {
    // Before disabling a feature set, we have to check if included features
    // implement content types and then if it remains nodes with
    // theses content types.
    $check_node = 0;
    foreach ($feature_set['disable'] as $module_to_disable) {
      $info_file = drupal_get_path('module', $module_to_disable) . "/" . $module_to_disable . ".info";
      $info = drupal_parse_info_file($info_file);

      // The feature implements a content type.
      if (isset($info['features']['node'])) {
        $node_type_warning = array();
        foreach ($info['features']['node'] as $node_type) {
          $result = db_select('node', 'n')
            ->fields('n', array('nid'))
            ->condition('type', $node_type, '=')
            ->execute()
            ->fetchAll();

          // It exists nodes of this content type.
          if (count($result) > 0) {
            $check_node++;
            $node_type_warning[] = $node_type;
          }
        }
      }
    }

    if ($check_node > 0) {
      drupal_set_message(t("<b>WARNING</b><br/> %f not disabled, you have to remove all <b>%t</b> contents.", array(
        '%f' => check_plain($feature_set['title']),
        '%t' => implode("", $node_type_warning),
      )), 'warning');
    }
    else {
    module_disable($feature_set['disable']);
  }
  }
  if (!empty($feature_set['uninstall'])) {
    drupal_uninstall_modules($feature_set['uninstall']);
  }
}

/**
 * Calculate the lists of meta feature_sets to enable and disable.
 *
 * @param array $form_state
 *   form_state array from feature_set_admin_form or NULL if called from a
 *   non-submit handler.
 *
 * @return array|NULL
 *   With two sub-arrays of the corresponding feature sets to disable and enable.
 *   If $form_state is provided it will calculate the enable and disable sets
 *   with the form state in mind.
 */
function feature_set_get_meta_feature_sets($form_state = NULL) {
  $feature_sets = feature_set_get_featuresets();
  $sets = array(
    'enable' => array(),
    'disable' => array(),
  );

  foreach ($feature_sets as $set => $details) {
    if ($details['meta'] && !empty($details['dependencies'])) {
      $enable = TRUE;
      foreach ($details['dependencies'] as $dependency) {
        if (!empty($form_state['values'])) {
          // Use the submitted form to calculate meta-sets
          // (during install we may stale status data).
          if (empty($form_state['values']['featureset-' . $dependency])) {
            $enable = FALSE;
          }
        }
        else {
          // Use the existing state to calculate meta-sets.
          if ($feature_sets[$dependency]['status'] != FEATURE_SET_ENABLED) {
            $enable = FALSE;
          }
        }
      }

      if ($enable) {
        $sets['enable'][] = $set;
      }
      else {
        $sets['disable'][] = $set;
      }
    }
  }
  return $sets;
}

/**
 * Given a feature_set return status.
 *
 * Since disable modules is a subset of enable modules disable status and
 * enable status are mutually exclusive. However, there is a third state of
 * "inconsistent" indicated by not all of the enable module being enabled and
 * not all of the disable modules being disabled.
 *
 * @param string $feature_set
 *   Name of the feature set to get status for.
 *
 * @return bitmask if neither FEATURE_SET_ENABLED or FEATURE_SET_DISABLED
 *   Bits are set then the feature_set is considered to be in and inconsistent
 *   state.
 */
function feature_set_status($feature_set) {
  $status = 0x00;

  if (!empty($feature_set['enable'])) {
    $enabled = TRUE;
    foreach ($feature_set['enable'] as $module) {
      if (!module_exists($module)) {
        $enabled = FALSE;
        break;
      }
    }
    if ($enabled) {
      $status = $status | FEATURE_SET_ENABLED;
    }
  }

  if (!empty($feature_set['disable'])) {
    foreach ($feature_set['disable'] as $module) {
      $disabled = TRUE;
      if (module_exists($module)) {

        $disabled = FALSE;
        break;
      }
    }
    if ($disabled) {
      $status = $status | FEATURE_SET_DISABLED;
    }
  }
  return $status;
}

/**
 * Checks to ensure the feature_set is valid.
 *
 * Currently this only checks if the disable list of modules is a subset of
 * the enable set of modules. If the feature_set is invalid we throw a watchdog
 * error.
 *
 * @param string $feature_set
 *   Name of the feature_set to check.
 *
 * @return bool
 *   TRUE if the feature_set passes validation, FALSE otherwise.
 */
function feature_set_check($feature_set) {
  if (!empty($feature_set['enable'])) {
    $subset = array_intersect($feature_set['disable'], $feature_set['enable']);
    if ($subset == $feature_set['disable']) {
      return TRUE;
    }
  }
  watchdog('feature_set', 'Invalid feature set "@set" provided by @module', array('@module' => $feature_set['module'], '@set' => $feature_set['title']), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Return TRUE if features or modules require the module $module.
 */
function _feature_set_is_requiredby($module) {
  $is_required = 0;

  $modules = system_rebuild_module_data();
  if (isset($modules[$module])) {
    $required_by = $modules[$module]->required_by;
    $module_list = array_keys(module_list());
    if (!empty($required_by)) {
      foreach (array_keys($required_by) as $key) {
        $check_module = in_array($key, $module_list);
        $check_profile = ($key == variable_get("install_profile")) ? TRUE : FALSE;
        // Check if the module is required by another one and if this module
        // is not a installation profile.
        if ($check_module && !$check_profile) {
          $is_required++;
        }
      }
    }
    return ($is_required > 0) ? TRUE : FALSE;
  }
}


/**
 * Return TRUE if module $module requires other features (that are disabled).
 */
function _feature_set_requires($module) {
  $requires = 0;

  $modules = system_rebuild_module_data();
  if (isset($modules[$module])) {
    if (is_array($modules[$module]->requires)) {
      $list_requires = array_keys($modules[$module]->requires);
    }
    else {
      $list_requires = array();
    }

    $list_feature = array_keys(feature_set_get_featuresets());
    $list_module_enabled = module_list();

    foreach ($list_requires as $value) {
      if (in_array($value, $list_feature) && !in_array($value, $list_module_enabled)) {
        $requires++;
      }
    }
    return ($requires > 0) ? TRUE : FALSE;
  }
}

/**
 * Return the list of all the modules that require the module $module.
 */
function _feature_set_get_require($module) {
  $modules = system_rebuild_module_data();

  $featuresets = feature_set_get_featuresets();
  $list_features = array_keys($featuresets);

  if (isset($modules[$module])) {
    if (is_array($modules[$module]->requires)) {
      $list_requires = array_keys($modules[$module]->requires);
    }
    else {
      $list_requires = array();
    }

    $output = '<div id="require">';
    foreach ($list_features as $value) {
      if (in_array($value, $list_requires)) {
        $output .= t("requires") . " : " . $featuresets[$value]["title"] . " ";
      }
    }
    $output .= '</div>';
    return $output;
  }
}


/**
 * Implements hook_theme().
 */
function feature_set_theme($existing, $type, $theme, $path) {
  return array(
    'feature_set_admin_form' => array(
      'file' => 'feature_set.admin.inc',
      'render element' => 'form',
	  'template' => 'feature-set-admin-form',
    ),
  );
}

/**
 * Implements template_preprocess().
 */
function feature_set_preprocess_feature_set_admin_form(&$variables) {
  if (isset($variables['form']['#form_id']) && $variables['form']['#form_id'] == 'feature_set_admin_form') {
    $feature_set_category = array();
    foreach ($variables['form'] as $key => $item) {
      $variables['feature_set_row'][$key] = $item;

      // Get category if available.
      if (is_array($item) && isset($item['#featuresetinfo'])) {
        if (empty($item['#featuresetinfo']['category'])) {
          $feature_set_category['category']['Uncategorized'][$key] = $item;
        }
        else {
          $feature_set_category['category'][$item['#featuresetinfo']['category']][$key] = $item;
        }
      }
      else {
        $feature_set_category['form'][$key] = $item;
      }
    }

    ksort($feature_set_category['category']);
    $variables['feature_set_category'] = $feature_set_category;
  }

  $variables['feature_set_input'] = render($feature_set_category['form']['submit']) .
    render($feature_set_category['form']['form_build_id']) .
    render($feature_set_category['form']['form_token']) .
    render($feature_set_category['form']['form_id']);

  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
}
