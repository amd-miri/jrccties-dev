<?php

/**
 * @file
 * Integration of the Linkchecker module with Organic Groups to allow group
 * owners to maintain links in their own groups.
 */

define('OG_LC_PERM', 'access group broken links report');

/**
 * Implements hook_help().
 */
function og_linkchecker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#og_linkchecker':
      $output = '';
      $output .= '<p>' . t("This module creates a menu tab to a Link Checker broken links report for each OG group. See the OG Linkchecker groups summary report for a full list of available group reports.") . '</p>';
      $output .= '<p>' . t('In order for members of an OG group to view their respective groups\' broken links reports, their OG roles must be given permissions though the <a href="@og-permissions">OG global permissions page</a> or through the group\'s permissions page. Group administrators have access to their group\'s broken links report by default.', array('@og-permissions' => url('admin/config/group/permissions'))) . '</p>';
      $output .= '<p>' . t('The behavior of this module is dependent on the configuration of the Link Checker module. You must configure Link Checker to scan group content types in order for this module to work. For links to the Link Checker administation pages, see the <a href="@linkchecker-help">Link Checker help page</a>.', array('@linkchecker-help' => url('admin/help/linkchecker'))) . '</p>';
      return $output;
      break;

    case 'admin/reports/og_linkchecker':
      $output = '';
      $output .= '<p>' . t("This report shows broken links information for each group.") . '</p>';
      $output .= '<p>' . t("The 'Group' column lists all groups using this syntax: Group Title (content_type_machine_name) [broken links report]") . '</p>';
      $output .= '<p>' . t("The 'Group Content Types' column lists all content types which are part of the group and follows this syntax: Content Type (content_type_machine_name)") . '</p>';
      $output .= '<p>' . t("The 'Group Roles' column lists all OG roles associated with the group. Roles which have permission to access the broken links report are green; those that do not are red.") . '</p>';
      $output .= '<p>' . t("The '# Broken Links' column displays the number of broken links in nodes belonging to the group. This number does not take into account broken links in user comments even if the linkchecker module is configured to scan comments.") . '</p>';
      $output .= '<p>' . t('Note: Links are evaluated only for content types selected in the main <a href="@linkchecker-conf">Linkchecker configuration page</a>.', array('@linkchecker-conf' => url('admin/config/content/linkchecker'))) . '</p>';
      return $output;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function og_linkchecker_menu() {
  // Add the user menu item after node/edit tab.
  $items = array();
  $items['node/%node/linkchecker'] = array(
    'title'             => 'Linkchecker',
    'description'       => 'Shows a list of broken links in content.',
    'page callback'     => 'og_linkchecker_report_page',
    'page arguments'    => array(1),
    'type'              => MENU_LOCAL_TASK,
    'access callback'   => 'og_linkchecker_access_callback',
    'access arguments'  => array(1),
    'weight'            => 4,
  );
  $items['admin/reports/og_linkchecker'] = array(
    'title'             => 'OG Linkchecker groups summary',
    'description'       => 'Information about broken links in OG groups.',
    'page callback'     => 'og_linkchecker_report',
    'access arguments'  => array('access broken links report'),
    'file'              => 'og_linkchecker.admin.inc',
    'type'              => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Access callback for menu hook.
 */
function og_linkchecker_access_callback($node) {
  if (og_is_group('node', $node)) {
    return (user_access('access broken links report') || og_user_access('node', $node->nid, OG_LC_PERM));
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_og_permission().
 */
function og_linkchecker_og_permission() {
  $perms = array();

  $perms[OG_LC_PERM] = array(
    'title' => t('Access group broken links report'),
    'description' => t('Allows users to access the group broken links report.'),
    'roles' => array(OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'module' => 'og_linkchecker',
  );

  return $perms;
}

/**
 * Menu callback for group reporting.
 */
function og_linkchecker_report_page($node) {
  // Include pages.inc file to call private Linkchecker function.
  module_load_include('inc', 'linkchecker', 'linkchecker.pages');

  $context = og_context();

  // Get group nid so we can find results within this group.
  $gids = array($context['gid']);

  // Begin code adapted from the Linkchecker module.
  drupal_set_title(t('@node-title: Linkchecker Report', array('@node-title' => $node->title)));

  $ignore_response_codes = preg_split('/(\r\n?|\n)/', variable_get('linkchecker_ignore_response_codes', "200\n206\n302\n304\n401\n403"));

  // Build query for broken links in nodes of the current user.
  $subquery2 = db_select('node', 'n');
  $subquery2->innerJoin('node_revision', 'r', 'r.vid = n.vid');
  $subquery2->innerJoin('linkchecker_node', 'ln', 'ln.nid = n.nid');
  $subquery2->innerJoin('linkchecker_link', 'll', 'll.lid = ln.lid');
  $subquery2->condition('ll.last_checked', 0, '<>');
  $subquery2->condition('ll.status', 1);
  $subquery2->condition('ll.code', $ignore_response_codes, 'NOT IN');
  $subquery2->innerJoin('og_membership', 'om', 'n.nid = om.etid');
  $subquery2->condition('om.gid', $gids, 'IN');
  $subquery2->condition('om.entity_type', 'node');
  $subquery2->distinct();
  $subquery2->fields('ll', array('lid'));

  if (variable_get('linkchecker_scan_comments', 0)) {
    // Build query for broken links in nodes and comments of the current user.
    $subquery3 = db_select('comment', 'c');
    $subquery3->innerJoin('linkchecker_comment', 'lc', 'lc.cid = c.cid');
    $subquery3->innerJoin('linkchecker_link', 'll', 'll.lid = lc.lid');
    $subquery3->condition('ll.last_checked', 0, '<>');
    $subquery3->condition('ll.status', 1);
    $subquery3->condition('ll.code', $ignore_response_codes, 'NOT IN');
    $subquery3->innerJoin('og_membership', 'om', 'c.nid = om.etid');
    $subquery3->condition('om.gid', $gids, 'IN');
    $subquery3->condition('om.entity_type', 'node');
    $subquery3->distinct();
    $subquery3->fields('ll', array('lid'));

    // UNION the linkchecker_node and linkchecker_comment tables.
    $subquery1 = db_select($subquery2->union($subquery3), 'q1')->fields('q1', array('lid'));
  }
  else {
    // Build query for broken links in nodes of the current user.
    $subquery1 = db_select($subquery2, 'q1')->fields('q1', array('lid'));
  }

  // Build pager query.
  $query = db_select('linkchecker_link', 'll')->extend('PagerDefault')->extend('TableSort');
  $query->innerJoin($subquery1, 'q2', 'q2.lid = ll.lid');
  $query->fields('ll');
  $query->condition('ll.last_checked', 0, '<>');
  $query->condition('ll.status', 1);
  $query->condition('ll.code', $ignore_response_codes, 'NOT IN');
  // End code adapted from the Linkchecker module.

  return _linkchecker_report_page($query);
}
