<?php

/**
 * @file
 * Contains hook_install() and hook_update_N().
 */

/**
 * Implements hook_schema().
 */
function integration_schema() {

  $schema['integration_backend'] = integration_schema_defaults();
  $schema['integration_backend']['fields'] += [
    'formatter' => [
      'description' => 'The id of the formatter plugin to use.',
      'type' => 'varchar',
      'length' => 50,
      'not null' => TRUE,
    ],
    'authentication' => [
      'description' => 'The id of the authentication plugin to use.',
      'type' => 'varchar',
      'length' => 50,
      'not null' => TRUE,
    ],
  ];

  $schema['integration_backend_entities'] = [
    'description' => 'Mapping between local and remote entities IDs.',
    'fields' => [
      'id' => [
        'description' => 'Primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'backend_name' => [
        'description' => 'Backend configuration machine name.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ],
      'backend_id' => [
        'description' => 'Backend remote unique ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'entity_type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ],
      'entity_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'search' => ['entity_type', 'entity_id', 'backend_name', 'backend_id'],
    ],
    'unique keys' => [
      'backend_name_backend_id' => ['backend_name', 'backend_id'],
    ],
    'primary key' => ['id'],
  ];

  $schema['integration_resource_schema'] = integration_schema_defaults();

  return $schema;
}

/**
 * Provides sensitive defaults for hook_entity_info() implementations.
 *
 * @return array
 *    List of hook_schema() defaults.
 *
 * @see hook_schema()
 */
function integration_schema_defaults() {
  return [
    'fields' => [
      'id' => [
        'description' => 'Primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'name' => [
        'description' => 'Human readable configuration name.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ],
      'machine_name' => [
        'description' => 'Configuration machine name.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ],
      'description' => [
        'description' => 'Configuration entity description.',
        'type' => 'text',
        'not null' => FALSE,
      ],
      'plugin' => [
        'description' => 'Plugin name, as returned by hook_integration_PLUGIN_TYPE_info() implementations.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ],
      'settings' => [
        'description' => 'Configuration entity settings.',
        'type' => 'text',
        'size' => 'medium',
        'serialize' => TRUE,
        'not null' => TRUE,
      ],
      'enabled' => [
        'description' => 'A flag indicating whether the configuration is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ],
      'status' => [
        'description' => 'The exportable status of the configuration entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ],
      'module' => [
        'description' => 'The name of the module from which this configuration entity originates.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
    ],
    'indexes' => [
      'enabled' => ['enabled'],
    ],
    'unique keys' => [
      'machine_name' => ['machine_name'],
    ],
    'primary key' => ['id'],
  ];
}

/**
 * Create "integration_backend_entities" table.
 */
function integration_update_7101() {
  $schema = integration_schema();
  db_create_table('integration_backend_entities', $schema['integration_backend_entities']);
}

/**
 * Remove "response" field on "integration_backend" table.
 */
function integration_update_7102() {
  db_drop_field('integration_backend', 'response');
}
