<?php

/**
 * @file
 * Code for the Splash_screen feature.
 */

/**
 * Implements hook_menu().
 */
function splash_screen_menu() {
  $items['admin/config/splash_screen'] = array(
    'title' => 'Splash screen settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_splash_screen_settings'),
    'access arguments' => array('administer splash screen'),
  );
  $items['admin/config/splash_screen/settings'] = array(
    'title' => 'Splash screen settings',
    'description' => 'Configure the splash screen module',
    'file' => 'includes/splash_screen.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_splash_screen_settings_form'),
    'access arguments' => array('administer splash screen'),
  );
  $items['splash'] = array(
    'title' => 'Splash screen',
    'page callback' => 'theme',
    'page arguments' => array('splash'),
    'access callback' => array('splash_screen_check_access'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Custom callback function to check access.
 */
function splash_screen_check_access() {
  global $language;

  if ($language->provider == 'language-default' || isset($_GET['destination'])) {
    // Display splash screen.
    return TRUE;
  }
  else {
    // Redirect user to real home page, in correct language
    // Extra test has to be made to check current page because... Drupal.
    $home = variable_get('splash_screen_home_page', '');
    if (drupal_is_front_page() && !empty($home)) {
      drupal_goto($home);
    }
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function splash_screen_theme($existing, $type, $theme, $path) {
  return array(
    'splash' => array(
      'template' => 'splash',
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function splash_screen_preprocess_splash(&$variables) {
  global $base_url;

  // Initialize variables.
  $home_page = variable_get('splash_screen_home_page', '');
  $href = $home_page;
  $options = array();
  $languages_blacklist = variable_get('splash_screen_blacklist', array());
  $languages = language_list('enabled');
  $languages_list = '<ol>';
  $close_button = '';

  // Prepare links href when destination is set.
  // Use case: use site level language selector.
  if (isset($_GET['destination'])) {
    $href_array = parse_url($_GET['destination']);
    $href = $href_array['path'];

    if (isset($href_array['query'])) {
      parse_str($href_array['query'], $parameters);
      $options['query'] = $parameters;
    }

    // Also enable close button.
    $close_button = l(t('Close'), $href, $options);
  }

  // Add enabled languages, if not in blacklist.
  foreach ($languages[1] as $lang) {
    if (!in_array($lang->prefix, $languages_blacklist)) {

      // Prepare links options.
      $options['attributes']['lang'] = $lang->prefix;
      $options['attributes']['hreflang'] = $lang->prefix;

      $languages_list .= '<li>';
      $languages_list .= l($lang->native, $href, $options);
      $languages_list .= '</li>';
    }
  }

  $languages_list .= '</ol>';

  // Export variables to template.
  $variables['close_button'] = $close_button;
  $variables['languages_list'] = $languages_list;
  $variables['languages_list_array'] = $languages[1];
  $variables['languages_blacklist'] = $languages_blacklist;
}

/**
 * Implements hook_permission().
 */
function splash_screen_permission() {
  return array(
    'administer splash screen' => array(
      'title' => t('Administer splash screen'),
      'description' => t('Administrer full settings of the splash screen module.'),
    ),
  );
}


/**
 * Implements hook_theme_registry_alter().
 * 
 * Use template files of splash_screen module (if not defined on the theme).
 * @see https://www.drupal.org/node/715160
 */
function splash_screen_theme_registry_alter(&$theme_registry) {
    // Defined path to the current module.
    $module_path = drupal_get_path('module', 'splash_screen');
    // Find all .tpl.php files in this module's folder recursively.
    $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
    // Iterate through all found template file objects.
    foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
        if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
            $theme_registry[$key]['theme path'] = $module_path;
            $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
            $theme_registry[$key]['type'] = 'module';
        }
    }
}
