<?php

/**
 * @file
 * Tests for STARTERKIT feature.
 * FPFIS MULTISITE QA
 */
class STARTERKIT extends DrupalWebTestCase {

  protected $administrator;
  protected $anonymous;
  protected $contributor;
  protected $editor;

  public static function getInfo() {
    return array(
        'name' => 'STARTERKIT QA test',
        'description' => 'Social Bookmark QA tests 1.0 beta1',
        'group' => 'STARTERKIT GROUP',
    );
  }

  public function setUp() {
    parent::setUp('STARTERKIT');

    $this->administrator = $this->drupalCreateUser(array(
        'access administration pages',
        'access content',
        'create article content',
        'administer blocks',
    ));

    $this->anonymous = $this->drupalCreateUser(array(
        'access content',
    ));

    $this->drupalLogin($this->administrator);
    $this->setTheme('ec_resp');
  }

  /**
   * Each function must start with prefix test
   */
  function testSTARTERKIT() {
    //init
    $this->feature_name = 'STARTERKIT';
    $feature_name = $this->feature_name;

    //Check the presence of module
    $this->assertTrue(module_exists($feature_name), t('%feature_name feature enabled.', array('%feature_name' => $this->feature_name)));
    $this->drupalGet('<front>');


    $this->drupalLogout();
    $this->drupalLogin($this->anonymous);
    //
    //Debug method
    //$this->verbose('Label: ' . '</pre>' . print_r($bid, TRUE) . '</pre>');
  }

  /**
   *  HELPER FUNCTIONS - DELETE THEM IF NOT NEEDED!
   */

  /**
   * Activate Theme
   * @param type $new_theme
   */
  public function setTheme($new_theme) {
    db_update('system')
            ->fields(array('status' => 1))
            ->condition('type', 'theme')
            ->condition('name', $new_theme)
            ->execute();
    variable_set('theme_default', $new_theme);
    unset($GLOBALS['theme']);
    drupal_theme_initialize();
  }

  /**
   *  Activates a block
   * @param type $module
   * @param type $delta
   * @param type $region
   * @param type $theme
   * @param type $pages
   * @param type $visibility
   */
  public function setBlock($module, $delta, $region, $theme, $pages, $visibility) {
    drupal_set_message("Activating block $module:$delta\n");
    cache_clear_all();
    db_update('block')
            ->fields(array(
                'pages' => trim($pages),
                'region' => $region,
                'visibility' => $visibility,
            ))
            ->condition('module', $module)
            ->condition('delta', $delta)
            ->condition('theme', $theme)
            ->execute();
    cache_clear_all();
  }

  /**
   * Assign a block to a region
   * @param type $block
   * @param type $region
   */
  public function moveBlockToRegion($block, $region) {
    // Set the created block to a specific region.
    $edit = array();
    $edit['blocks[' . $block['module'] . '_' . $block['delta'] . '][region]'] = $region;
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    // Confirm that the block was moved to the proper region.
    $this->assertText(t('The block settings have been updated.'), format_string('Block successfully moved to %region_name region.', array('%region_name' => $region)));
    // Confirm that the block is being displayed.
    $this->drupalGet('node');
    $this->assertText(t($block['title']), 'Block successfully being displayed on the page.');
    // Confirm that the custom block was found at the proper region.
    $xpath = $this->buildXPathQuery('//div[@class=:region-class]//div[@id=:block-id]/*', array(
        ':region-class' => 'region region-' . str_replace('_', '-', $region),
        ':block-id' => 'block-' . $block['module'] . '-' . $block['delta'],
    ));
    $this->assertFieldByXPath($xpath, NULL, format_string('Custom block found in %region_name region.', array('%region_name' => $region)));
  }

  /**
   * Create n nodes
   * @param type $count
   *
   * Check
   * $this->assert((bool) $node, 'Page "' . $node->nid . '" has been created.');
   */
  public function createSampleNodes($count = 5) {
    $langcode = LANGUAGE_NONE;
    // Post $count article nodes.
    for ($i = 0; $i < $count; $i++) {
      $edit = array();
      $edit['title'] = $this->randomName();
      $edit["body[$langcode][0][value]"] = $this->randomName();
      $this->drupalPost('node/add/article', $edit, t('Save'));
    }
  }
  /**
   *
   * @param type $node
   * @param type $comment
   *
   * Usage:
      $this->drupalCreateComment($node);
   */
    function drupalCreateComment($node, $comment = array()) {
     $comment += array(
      'subject' => $this->randomName(8),
      'comment' => $this->randomName(32),
      'uid' => $node->uid,
      'nid' => $node->nid,
      'node_type' => 'comment_node_' . $node->type,
      'status' => COMMENT_PUBLISHED,
      'cid' => 0, 'pid' => 0,
    );
    $comment = (object) $comment;
    comment_save($comment);
    $this->assertTrue($comment->cid, "Successfully created comment: {$comment->cid} for node {$node->nid} ({$node->type}).");
  }

  /**
   * Create a user with a specified role
   * @param type $role
   * @return type
   */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();
    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);
    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));
    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));
    // Assign the role.
    $user->roles[$index] = $role;
    // Return the user we have created.
    return user_save($user);
  }
  /*
   * Example usage: $image = $this->createFile('image-' . rand() . '.jpg', 'image/png');
   */

    function createFile($filepath = NULL, $mime = 'text/plain', $contents = NULL, $scheme = NULL) {
    if (!isset($filepath)) {
      // Prefix with non-latin characters to ensure that all file-related
      // tests work with international filenames.
      $filepath = 'Файл для тестирования ' . $this->randomName();
    }
    if (!isset($scheme)) {
      $scheme = file_default_scheme();
    }
    $filepath = $scheme . '://' . $filepath;

    if (!isset($contents)) {
      $contents = "file_put_contents() doesn't seem to appreciate empty strings so let's put in some data.";
    }

    file_put_contents($filepath, $contents);
    $this->assertTrue(is_file($filepath), t('The test file exists on the disk.'), 'Create test file');

    $file = new stdClass();
    $file->uri = $filepath;
    $file->filename = drupal_basename($file->uri);
    $file->filemime = $mime;
    $file->uid = 1;
    $file->timestamp = REQUEST_TIME;
    $file->filesize = filesize($file->uri);
    $file->status = 0;
    // Write the record directly rather than calling file_save() so we don't
    // invoke the hooks.
    $this->assertNotIdentical(drupal_write_record('file_managed', $file), FALSE, t('The file was added to the database.'), 'Create test file');

    return $file;
  }

}
