<?php

/**
 * @file
 * Tests for multisite_autosave.module.
 * ECWeb MULTISITE Feature Test
 */

/**
 * Defines a base class for testing the Autosave feature.
 */
class MultisiteAutosaveFeatureTest extends DrupalWebTestCase {
  protected $web_user;
  
  /**
   * Info for the simpleTest UI.
   */
  public static function getInfo() {
    return array(
      'name' => 'multisite_autosave feature test',
      'description' => 'Test the multisite_autosave feature to ensure it works as intended.',
      'group' => 'Multisite Core Features',
    );
  }

  /**
   * Configure the environment, enable the required modules.
   */
  public function setUp() {
    parent::setUp(array('autosave', 'multisite_autosave'));
  }

  /**
   * Verify that current user has no access to page.
   * @param $url
   * URL to verify.
   */
  function autosaveVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied
    $this->drupalGet($url);
    $this->assertResponse(403, 'Not Allowed Access -> Expected Fail');
  }

  /**
   * Verify that current user has access to page.
   * @param $url
   * URL to verify.
   */
  function autosaveVerifyAccess($url) {
    // Test that page returns 200 Access OK
    $this->drupalGet($url);
    $this->assertResponse(200, 'Allowed Access -> Expected OK');
  }

  /**
   * Check the access to the autosave configuration depending on the available roles.
   */
  function testAutosaveAccess() {
    // Verify that anonymous users can't access to autosave configuration.
    $this->autosaveVerifyNoAccess('admin/config/content/autosave');

    // Create a regular user and login.
    $this->web_user = $this->drupalCreateUser();
    $this->drupalLogin($this->web_user);
    // Verify that authenticated users can't access to autosave configuration.
    $this->autosaveVerifyNoAccess('admin/config/content/autosave');

    // Create a user with permissions and login.
    $this->web_user = $this->drupalCreateUser(array('administer nodes'));
    $this->drupalLogin($this->web_user);
    // Verify that administrator users can access to autosave configuration.
    $this->autosaveVerifyAccess('admin/config/content/autosave');    
  }

  /**
   * Check that the content type Article has a check to activate the Autosave feature. 
   */
  function testAutosaveCheck() {
    // Create a user with permissions and login.
    $this->web_user = $this->drupalCreateUser(array('administer content types'));
    $this->drupalLogin($this->web_user);
    // Go to the article config page and confirm that the Autosave check is available.
    $this->drupalGet('admin/structure/types/manage/article');
    $this->assertNoFieldChecked('edit-autosave', "The check is available and not active by default");   
  }
}