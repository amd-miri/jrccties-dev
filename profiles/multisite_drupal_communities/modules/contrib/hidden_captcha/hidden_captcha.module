<?php

/**
 * Implementation of hook_help().
 */
function hidden_captcha_help($path, $arg) {
  switch ($path) {
    case 'admin/config/people/captcha/hidden_captcha':
      return '<p>'. t('This CAPTCHA presents a text field that we expect no one to fill. The text field can be given any name and will be hidden from view using CSS.') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function hidden_captcha_menu() {
  $items = array();
  $items['admin/config/people/captcha/hidden_captcha'] = array(
    'title' => 'Hidden CAPTCHA',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hidden_captcha_settings_form'),
    'access arguments' => array('administer CAPTCHA settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10
  );
  return $items;
}

/**
 * Function for the hidden captcha settings form.
 */
function hidden_captcha_settings_form() {
  $form = array();
  $form['hidden_captcha_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Hidden text field label'),
    '#description' => t(
      "This is the hidden captcha form field's label, describing the expected input.<br />".
      "<strong>It is highly recommended to change it!</strong><br />".
      "The label should be as \"machine-readable\" as possible, encouraging spambots to fill in the field. An example might be a simple math challenge.<br />".
      "The label will only be visible to people who do not have CSS enabled and to robots."
    ),
    '#default_value' => variable_get('hidden_captcha_label', 'Website URL'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_captcha().
 */
function hidden_captcha_captcha($op, $captcha_type = '') {
  switch ($op) {
    case 'list': return array('Hidden CAPTCHA');
    case 'generate':
      if ($captcha_type == 'Hidden CAPTCHA') {
        $captcha = array();
        $captcha['solution'] = '';
        $captcha['form']['captcha_response'] = array(
          '#type' => 'textfield',
          '#title' => variable_get('hidden_captcha_label', 'Website URL'),
          '#required' => FALSE
        );
        return $captcha;
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function hidden_captcha_theme() {
  return array(
    'captcha' => array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_hidden_captcha_captcha'
    )
  );
}

/**
 * Implementation of theme_hook().
 */
function theme_hidden_captcha_captcha($element) {
  $captcha = theme_captcha($element);
  if (strncmp($element["element"]["#captcha_type"], "hidden_captcha/", 15) == 0) {
    //generate a random class name
    $chars = "abcdfghjkmnpqrstvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    $class = "";
    for ($i = 0; $i < 64; ++$i) $class .= substr($chars, rand(0, strlen($chars)-1), 1);
    //hide the random class via css
    drupal_add_css(".$class{width:0;height:0;overflow:hidden;}","inline"); // TODO: move the random class to an external file
    //html for the captcha
    $captcha = "<div class=\"$class\">" . $captcha . "</div>";
  }
  return $captcha;
}
